<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星光light</title>
  
  <subtitle>星光light的blog</subtitle>
  <link href="https://xglight.github.io/rss.xml" rel="self"/>
  
  <link href="https://xglight.github.io/"/>
  <updated>2025-10-29T14:35:50.077Z</updated>
  <id>https://xglight.github.io/</id>
  
  <author>
    <name>星光light</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025.10.29-NOIP</title>
    <link href="https://xglight.github.io/posts/d98fae2/"/>
    <id>https://xglight.github.io/posts/d98fae2/</id>
    <published>2025-10-29T13:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.077Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="fe94a0d8c1a7911d1bf880e6abb357c7e04a46b84e5ff2eee0aa91ebaa8dadd5">93024cf999deb8d8b2919f7e109263d4fa4f22b5a6d5f2a46597c1ea59cef215f2fb6074b217f6d1d837246605c722979219760661120bad378ee841db1d6ece06b715dc2ec3e418211e4ac040af43a52585d4be41aad0352b96f107ff167c660c7473800697740c5f8d4f36c0a7797358ec23557d0a4551a246fad8ba24a2d60a6c6db4949ea496d54435c59b5667e1765c2b4f2609eaad0a02ae00fbf44cc8bbe682507298e6fa7f33ea286aea7273f04d390170745b943ee40ddbbfa46acd1522920d7ba3ef2390f777a724b88cd9dd0186372461b04c5a340733e0ee48a682d6a151beb0c7aa776de6fe86d1ba589dfb7b0a70bad0a6245955f94b5fc397525e1f60b0b14d2449133c01cc16394b052434bc36bb90c2b01ac0d2b9d2d6c7217962339d18164e84f656cc8f5c2f63d4dbb50b40fe43bd1ff1c5a6c8be7fdee906e039689ac7197fb53844896ec4bfa31227a3efd28165f16f4780ceb3dd21ba73af4e032bfcf83c3590ba48cb00005830f8a35c29538ce4ce0a9f074e77b096f1404503a210ddde5855eeff8ebd886daa558c4e83be9de27c5fe0bcd6fc074e18076dc0fd619ff9402257b152138b2c0afebc4937bbc9e991b265ea3ae9b54d62d886984b4ee01adc2537abedbd723d1d4245e1b7de334d90eed4b486fa6663e0c1ff803a1a2fd8f234ef6bd1b4491605c6cb09879da207e9d9a3b957538428f41e30e9e902035cc0d858fe147a5d889506e4f65d96daebcddd80fa24ea5bf1dd3ae6d27b71033411a64dfe3e59a7edb56dce23f8ede608d075900a1fef6f4d1080aa21bb2f911c9f66edc149956569427bb092e0a57a30007f52b7d9146a1b5ef430bd128c2e0129ae074c2d9b96546b5fd57a8b69992f6da4eb0ace29f23a719284537165d35ad7022d1ee121e5a3cb0161edf9ef943b04c283788e7574c7b627d54b4c966bf3ca7e8d3faf178e9ef8a98ad69d1dd8b8793276f60f4c7dab3dfcb45cad9e6f74f26e7fb4b4e81c5a055469cb3f0d943704f9578714655134ca992a18cbf2bff7d13b37434a82a5349a8aef7a7135c71af4a3d0b714a1a766a2e522af67fa0203f08c3dd424e70fbccf9e5de37b8f754dd26679a3608208571844e3be8be547bd9599fbe20a6acb4b43f95bb6ed8f89babc8ec03e791f324831a76779e102578ef4df7d5935887445967ccd7ad97603794821ec78f3c1a53eaf5311ffef3a196777e0ba3c1c689669fd8b36301ea50321e57c323e90579f412223fac9edbda88b56c0038fc78f1928ea5e2dbba323687bd3740ebf42a38d8c66412b535a6bd2639eac4b448e22b01f9b4fa471ab40d2ea9dec9cf0db219dd82b4bdcfce403fedc19f9c75399f3cbe26d616b5d2cadc9074f67cfd078c29ff71f13c688785076fc13928b4bcd352f1b9b99f43a66aaa5a09a6a39092abd7f1676ffe78e54202a3ce67aae85f3e9a4a8b27c924abeb6cbdf9b1dac6ba591ec8b2f1b3f595d37e0825e270b5df78d1970017e3e2dbac7d94997dac12555877862c7a16c92d50360a1d570b8116e4191868b7bbd875b4f889cae12db9d509a45b2cb6d3f64ba7e0eb8796f237f76f305cc6d0b7b03908f0340cfbab6aa03f6598c4ca8da879772e6da26d8b18bfec008ba28763bf78be80a37a5ecb5ebc7725255af239f08323b55a995b13faba1e0c7bf49fc09aff89f0181a9de4d2a08ad5eae3b5c495a00f086299a2723b697ace2a62527a58a17f9e50577bffd58d6100eee22330b2c4d4f763d68eef8bd57975294f93b2b37bef6c95fb5c1f1d2d3d3352e90c7ee6d019e040b1f5f9246adaf3c7948a546c083fa7602e45eced1988b84bba839bdc1bcf70fd36b6c47cbdb7a88caa1e45ee7838088e7694884013b9cd240bf2332e88a79f8e8809cb893231da453873722d7e946b556003517f8f3580da6e311d1f09ef5499b3ffd6b54cfcabdb4b79f5b414a222509996c1120663b3a9ae49500ef9046f4ffb912348f225cbae10fb6e3b2e4a76f7327006bdcf2e9818cac3b41451f99c2fa034c64cd48e583427596e7d83569e8b46fef8a65c427dd3a1885e89f831f9fe9ef2ef89902ba912951699ef2b296a7cd0454c2cc226022dafa47c4f965c560a8c122f391785808a454a535218f3c310cf98af1399daaaa13ae858a9221f23d2afa9171ce2860a7dd5cdbd7a6d0101406a978a1e71964bb6b8834b77bf0ce3e478255dd31e4cff34b254b08c41d2f5d60087ae733b57841e0d5c04587d40f140076991963e35305d6820d36f67371d258fe98ccbde6a3d212123043a9003fdcc42d8255fa109a7ee2113ff60f7d34e492cb80f1ad236be55e57d2b148d5e549725b72c85416ba5d97282bed6ab97bdd8f249a6676172eaec0024fdd108cf7c8355383c45a82ddd1764d2fe59c22c3979e4aaaef46c824795659c057c2d4e41669868c91be434ab9725241a5d189e06b26a823be4ee673b4c9d2540a6eb790dcecd310bcec050945cb68a197f96b4ab6df271cb4a4469f38eceb46effce333a6e0ef17aec7c41b4e990112d77cdc343f2f0164ab0a4ba455562af824aa5ae0c1d78e457868037db2cc9794682034fec1d77bf030b3c6731a69af46f9c581e7bf6ee7af4646a99c6c017bc9a369fd89f97aef2ef24a8af88253163fa28436b356dd5fa8f9697c1e189f79ce30d4662f301f05c121f0dad0a678773b44e659257564ae7541c2b45901c8fafec337f66b797fc2972eebbeddccb3f418646fa05d7e5e106b32727c2b44bc502a21a02ae8a065b5e25a6d7bfc92906a628fb5b191dc9115fb2efca87a500c7f148d84469f87a81a840000b15ecfd0babba6bdc76ad9f31aa978665cb2cab250161a46828accbb24552784baccd126dafc4dcdd88bd02a5bd0187445a738f2bc39f661a9b768a119feac0d20ed7bb164032f839a64068b1dd6ea90e64bcff322a52b444d53f64d33a376fe1303736c487c176aaabbdd5e1ce856d6ff046f32a6430a180715536c08f67f89c9f50db09627feb181e4d5c3c492a6a5486fa688c0807ab25428fcf943f3afbf78808f4357284809665b43c0b7e6ef220855ca8d7b6f357120ecfad93dad1a73811a8a01c2f66af643cd793c628212659c8d16269135ad46a0e1d8368716252eaeaf350a4ff19c338439b9479cf49f1bfddf24c50c2068f0460ff4ca851571058e36c40ab324f837a1de33e706eca9762c851e2a13c440d6e19076ae6afa4bf997ee27fc337c00dc6b04616a63bc3870f4550d86f024958626c93607fcf74431d36c4abc3a7ce92130349aad5dd70e6353622f46bf9f26a1470af8a0bb97c490fbbed91446463e3dc4883ad7a96eebce90a88b6a0fe09e6cb2a99633ebd567ac33f2d3c81eadfd9412aa800f52d90538ef093179afcb37886a844922b34ddf62eee2625095e2ab7925904e2c49bdaf21dc62622dc3a26a3d0cef4c219ed7139548dc23bcc67c66163f911049d4c6353d1e85046f203f3855594dbc296dbefdee6bd835f6447592206e02c2f9b5c53e68640d5dbfdeda8b76f2ba6f2b5fb4030e8856c1be9e37be7bd884048d9f8278762801066d05a4c9904973ab0a61beef9458df2ac9bb4dfbf8d13e6face16dbdeff8632a9435674ee89198c544f49c8a61fe84cfeb3981ed43707de6b8b64ce838cab2ccac33389500e6b02fef64d534e7e8162eb963a5c5ea6c636eb40b2494bff7e27a23f920f1a134877db6a77720fccc8309047825b8a4c26dbe9d546b7c29016302979cc16bbc320ab7b8bd2ceb71e34b18</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">2025.10.29-NOIP 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="school" scheme="https://xglight.github.io/tags/school/"/>
    
  </entry>
  
  <entry>
    <title>2025.10.28-NOIP</title>
    <link href="https://xglight.github.io/posts/c6c42947/"/>
    <id>https://xglight.github.io/posts/c6c42947/</id>
    <published>2025-10-28T13:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.077Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="dec0042d1f56cfa55af20cf344cf904f22961e78ae583d7b8292730f79facf47"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">2025.10.28-NOIP 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="school" scheme="https://xglight.github.io/tags/school/"/>
    
  </entry>
  
  <entry>
    <title>ABC 429 总结</title>
    <link href="https://xglight.github.io/posts/5c4fe895/"/>
    <id>https://xglight.github.io/posts/5c4fe895/</id>
    <published>2025-10-26T14:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[<p><sub><sub>我也不知道为什么没有 428。</sub></sub></p><h2>A,B,C</h2><p>简单题</p><h2>D</h2><p>一眼前缀和二分。</p><p><sub><sub>但是赛时二分就没有一发过的，还要调很久。</sub></sub></p><h2>E</h2><p>一眼宽搜，维护每个点到安全/危险点的最大值，次大值。</p><h2>F</h2><p>略微思考，发现是线段树维护矩阵。</p><p>但是赛时线段树打挂了。</p><h2>G</h2>]]></content>
    
    
    <summary type="html">ABC 429 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="atcoder" scheme="https://xglight.github.io/tags/atcoder/"/>
    
  </entry>
  
  <entry>
    <title>CF 2135</title>
    <link href="https://xglight.github.io/posts/2d1c6871/"/>
    <id>https://xglight.github.io/posts/2d1c6871/</id>
    <published>2025-10-24T14:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[<p>赛后 VP Div.1，感觉还行。</p><h2>A</h2><p>一个挺容易想的 DP，维护每中数字的位置，多了就删前面的。</p><h2>B</h2><p>交互题。</p><p>按照一贯思路，先考虑极端情况。把机器人移动到右上角，即往右移动 <span class="math inline">\(2e9\)</span>，再往上移动 <span class="math inline">\(2e9\)</span>。</p><p>此时绝对值可以去掉，设距离为 <span class="math inline">\(dis\)</span>，即：</p><p><span class="math display">\[dis = x+2e9+y+2e9 - \max\{x_i+y_i\}\]</span></p><p>再把机器人移动到右下角：</p><p><span class="math display">\[dis = x+2e9-(y-2e9)+\min\{y_i-x_i\}\]</span></p><h2>C</h2><p>赛时挺快想到思路，但没调出来。</p><p>树一定可以随便涂色。</p><p>考虑奇环，一定只能全为 <span class="math inline">\(0\)</span>，偶环上所有数一定要一样。</p><p>因此先把所有奇环找出来，填数，再跑边 <strong>双连通分量</strong>，填偶环上的数。</p><p>最后的 <span class="math inline">\(-1\)</span> 一定有 <span class="math inline">\(V\)</span> 种填法。</p><h2>D1</h2><p>还是交互，但赛时没时间想了。</p><p>一样考虑极端情况，先问 <span class="math inline">\(10^5\)</span> 个 <span class="math inline">\(1\)</span>。</p><p>设答案为 <span class="math inline">\(l_1\)</span>，容易发现此时能求出 <span class="math inline">\(W\)</span> 的范围：</p><p><span class="math display">\[W\in \left[\left \lceil \dfrac{10^5}{l_1}\right \rceil,\left \lceil \dfrac{10^5}{l_1-1}\right \rceil-1\right]\]</span></p><details class="toggle" ><summary class="toggle-button" style="">证明</summary><div class="toggle-content"><p>因为 <span class="math inline">\(l_1 = \left \lceil \dfrac{10^5}{W}\right \rceil\)</span>，所以 <span class="math inline">\(l_1-1 &lt; \dfrac{10^5}{W} \le l_1\)</span>。</p><p>推得：<span class="math inline">\(W(l_1-1)&lt;10^5\le Wl_1\)</span>，两边分别变形即可。</p></div></details><p>我们记 <span class="math inline">\(W\in[L,R]\)</span>，可以证明 <span class="math inline">\(2L &gt; R\)</span>。</p><details class="toggle" ><summary class="toggle-button" style="">证明</summary><div class="toggle-content"><p>首先肯定有 <span class="math inline">\(\left \lceil \dfrac{W}{L} \right \rceil  = \left \lceil \dfrac{R}{L} \right \rceil\)</span>。</p><p>假设 <span class="math inline">\(2L=R\)</span> 时，<span class="math inline">\(\left \lceil \dfrac{W}{2L} \right \rceil = \left \lceil \dfrac{\frac{W}{2}}{L} \right \rceil = \left \lceil \dfrac{\left \lceil\frac{W}{2} \right \rceil}{L} \right \rceil \neq \left \lceil \dfrac{W}{L} \right \rceil\)</span>，不成立。</p><p>因此 <span class="math inline">\(2L &gt; R\)</span>。</p></div></details><p>考虑神奇构造：<span class="math inline">\(\{L,\ 1,\ L,\ 2,\ L,\ 3,\ \cdots,\ L,\ R-L\}\)</span>。</p><p>序列每组形如 <span class="math inline">\((L,i)\)</span>，若 <span class="math inline">\(W\in[L,L+i-1]\)</span>，则造成 <span class="math inline">\(2\)</span> 的贡献，否则为 <span class="math inline">\(1\)</span>。</p><p>所以 <span class="math inline">\(l_2 = (W-L) + 2(R-W)\)</span>，即 <span class="math inline">\(W = 2R - L - l_2\)</span>。</p><h2>D2</h2><p>延续 D1 的思考，考虑如何缩小查询的大小。</p><p>将第一次查询换为填入 <span class="math inline">\(N\)</span> 个 <span class="math inline">\(B\)</span>。</p><p>若回答 <span class="math inline">\(l_1 = 0\)</span>，说明 <span class="math inline">\(W &lt; B\)</span>，容易发现 <span class="math inline">\(\left \lceil \dfrac{m}{1} \right \rceil，\left \lceil \dfrac{m}{2} \right \rceil，\cdots，\left \lceil \dfrac{m}{\sqrt{m}} \right \rceil\)</span> 这 <span class="math inline">\(\sqrt{m}\)</span> 个数互不相同。</p><p>因此询问 <span class="math inline">\(B^2\)</span> 个 <span class="math inline">\(1\)</span> 即可。</p><p>若回答 <span class="math inline">\(l_1 \neq 0\)</span>，同 D1 一样，我们也可以求出 <span class="math inline">\(W\)</span> 的范围。</p><p><span class="math display">\[W\in\left[\left\lceil\frac{C}{A_1}\right\rceil\cdot B,\min\left\{10^5,\left\lfloor\frac{C - 1}{A_1 - 1} + 1\right\rfloor\cdot B - 1\right\}\right]\]</span></p><p>证明与 D1 类似，不再展开。</p><p>这种方式的询问次数为 <span class="math inline">\(\min\{C+B^2,C+2(R-L)\}\)</span>，写一个暴力找出合适的 <span class="math inline">\(N\)</span> 与 <span class="math inline">\(B\)</span> 即可。</p><p>接下来步骤同 D1。</p><h2>E1/E2</h2><h2>F</h2><p>不知道为什么，总感觉 CF 的最后一题没有倒数几题难。</p><p>先考虑每个点的 <span class="math inline">\(f_u\)</span> 会是什么样子。</p><p>定义 <span class="math inline">\(X\)</span> 是 <strong>能级数</strong> 当且仅当以下两个条件其一成立时：</p><ul><li><span class="math inline">\(X=x\)</span>。</li><li><span class="math inline">\(X=x^{X_1X_2X_3\cdots X_n}\)</span>，其中 <span class="math inline">\(X_i\)</span> 也是 <strong>能级数</strong>，并且 <span class="math inline">\(n\)</span> 是一个常数。</li></ul><p><span class="math inline">\(f_u\)</span> 就形如 <strong>能级数</strong>。</p><p>考虑比较 <strong>能级数</strong> <span class="math inline">\(X = x^{X_1X_2X_3\cdots X_n}\)</span> 和 <span class="math inline">\(Y = x^{Y_1Y_2Y_3\cdots Y_m}\)</span> 的大小。</p><p>将指数从大到小排序，按照类似字典序比较即可。</p><blockquote><p>证明略，本人数学不好。</p></blockquote><p>接下来我们可以发现一个事实，一个父亲的 <span class="math inline">\(f\)</span> 一定大于它的儿子的 <span class="math inline">\(f\)</span>。</p><p>所以我们按照拓扑从叶子开始计算每个点的 <span class="math inline">\(f\)</span>，维护一个堆，每次拿出一个最小的 <span class="math inline">\(f\)</span> 更新。</p><p>用 vector 暴力维护 <span class="math inline">\(f\)</span> 即可（排序，插入）。</p>]]></content>
    
    
    <summary type="html">CF 2135 做题总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="codeforces" scheme="https://xglight.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>自然数的 k 次幂求和</title>
    <link href="https://xglight.github.io/posts/31a2dedc/"/>
    <id>https://xglight.github.io/posts/31a2dedc/</id>
    <published>2025-10-23T13:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[<h2>简介</h2><p>自然数的 <span class="math inline">\(k\)</span> 次幂求和，顾名思义，即求：</p><p><span class="math display">\[S_k(n) = \sum_{i=1}^{n} i^k\]</span></p><h2>待定系数法</h2><p>我们观察几组式子：</p><p><span class="math display">\[\begin{align*}S_1(n) &amp;= \frac{n(n+1)}{2} \\ S_2(n) &amp;= \frac{n(n+1)(2n+1)}{6}\\ S_3(n) &amp;= \frac{n^2(n+1)^2}{4} \\ S_4(n) &amp;= \frac{n(n+1)(2n+1)(3n^2+3n-1)}{30} \\ \end{align*}\]</span></p><p>总结规律，我们可以大胆猜想，<span class="math inline">\(S_k(n)\)</span> 的求和公式应该是一个 <span class="math inline">\(k+1\)</span> 次多项式。</p><p>所以可以直接列出 <span class="math inline">\(k+1\)</span> 个方程，解线性方程组。</p><p>证明在下一节给出。</p><h2>差分法</h2><p>可以得到： <span class="math display">\[S_k(n) = \frac{1}{k+1} \left[ (n+1)^{k+1} - 1 - \sum_{j=0}^{k-1} \binom{k+1}{j} S_j(n) \right]\]</span></p><details class="toggle" ><summary class="toggle-button" style="">证明</summary><div class="toggle-content"><p>考虑相邻整数的 <span class="math inline">\(k+1\)</span> 次幂差：</p><p><span class="math display">\[(m+1)^{k+1} - m^{k+1} = \sum_{j=0}^k \binom{k+1}{j} m^j\]</span></p><p>对 <span class="math inline">\(m\)</span> 进行求和：</p><p><span class="math display">\[\sum_{m=1}^n[(m+1)^{k+1} - m^{k+1}] = \sum_{m=1}^n \sum_{j=0}^k \binom{k+1}{j} m^j\]</span></p><p>左边易得：</p><p><span class="math display">\[(n+1)^{k+1} - 1\]</span></p><p>右边变换：</p><p><span class="math display">\[\begin{align*}&amp;\sum_{m=1}^n \sum_{j=0}^k \binom{k+1}{j} m^j \\=&amp;\sum_{j=0}^k\binom{k+1}{j}\sum_{m=1}^nm^j\\=&amp; \sum_{j=0}^{k} \binom{k+1}{j} S_j(n)\end{align*}\]</span></p><p>因此得到恒等式：</p><p><span class="math display">\[\sum_{j=0}^{k} \binom{k+1}{j} S_j(n) = (n+1)^{k+1} - 1\]</span></p><p>分离 <span class="math inline">\(S_k\)</span>：</p><p><span class="math display">\[\begin{align*}\binom{k+1}{k} S_k(n) + \sum_{j=0}^{k-1} \binom{k+1}{j} S_j(n) &amp;= (n+1)^{k+1} - 1\\(k+1) S_k(n) &amp;= (n+1)^{k+1} - 1 - \sum_{j=0}^{k-1} \binom{k+1}{j} S_j(n)\end{align*}\]</span></p><p>因此：</p><p><span class="math display">\[S_k(n) = \frac{1}{k+1} \left[ (n+1)^{k+1} - 1 - \sum_{j=0}^{k-1} \binom{k+1}{j} S_j(n) \right]\]</span></p></div></details><p>这样我们不仅得到了一条递推式，还证明了 <span class="math inline">\(S_k(n)\)</span> 的求和式是一个 <span class="math inline">\(k+1\)</span> 次多项式。</p><p>直接递推，复杂度 <span class="math inline">\(k^2\)</span>。</p><p>还可以用分治 FFT，复杂度 <span class="math inline">\(O(k\log^2 k)\)</span></p><h2>拉格朗日插值</h2><p>我们知道 <span class="math inline">\(S_k(n)\)</span> 的求和式是一个 <span class="math inline">\(k+1\)</span> 次多项式，当然可以用 <span class="math inline">\(k+2\)</span> 个点进行插值。</p><p>取 <span class="math inline">\((0,S_k(0)), (1,S_k(1)), \cdots, (n,S_k(k+1))\)</span> 作为 <span class="math inline">\(k+2\)</span> 个点，得：</p><p><span class="math display">\[S_k(n) = \sum_{i=0}^{k+1}S_k(i)\prod_{i\neq j}\frac{n-j}{i-j}\]</span></p><p>暴力是 <span class="math inline">\(k^2\)</span> 的，考虑优化。</p><p>分别考虑积的分子与分母。</p><p>对于分母，考虑 <span class="math inline">\(i\)</span> 已确定：</p><p><span class="math display">\[\begin{align*}&amp;\frac{1}{\prod_{i\neq j}(i-j)} \\=&amp;\frac{1}{i(i-1)(i-2)\cdots1\times(-1)\cdots(k+2-i-1)(k+2-i)} \\=&amp;(-1)^{k+2-i}\frac{1}{i!(k+2-i)!}\end{align*}\]</span></p><p>预处理阶乘与逆元即可。</p><p>对于分子:</p><p><span class="math display">\[\begin{align*}&amp;\prod_{i\neq j}(n-j)\\=&amp;n(n-1)\cdots\{n-(i-1)\}\{n-(i+1)\}\cdots\{n-(k+2)\}\\=&amp;\left\{\prod_{j=1}^{i-1}(n-j)\right\}\left\{\prod_{j=i+1}^{k+2}(n-j)\right\}\end{align*}\]</span></p><p>维护 <span class="math inline">\(n-j\)</span> 的前缀积和后缀积即可。</p><p>复杂度 <span class="math inline">\(O(k\log V)\)</span>，<span class="math inline">\(\log V\)</span> 是逆元复杂度，也可以 <span class="math inline">\(O(n)\)</span> 预处理优化。</p><h2>伯努利数</h2><p>有公式：</p><p><span class="math display">\[S_k(n) = \frac{1}{k+1}\sum_{i=0}^k\binom{k+1}{i}B_in^{k+1-i}\]</span></p><p>其中 <span class="math inline">\(B_i\)</span> 是伯努利数，定义为：</p><p><span class="math display">\[B_n = \begin{cases}1 &amp; n=0 \\-\frac{1}{2} &amp; n=1\\-\sum_{k=0}^{n-1}\binom{n}{k}B_k\frac{1}{n-k} &amp; n\equiv 0 \pmod 2\  \text{且}\ n&gt;1\\0 &amp; \text{otherwise}\end{cases}\]</span></p><blockquote><p>作者太菜了不会证明，可以参考 <a href="https://oi-wiki.org/math/combinatorics/bernoulli/">OI-Wiki</a></p></blockquote><h2>第一类 Stirling 数</h2><p>这次我们对 <span class="math inline">\(S_k(n)\)</span> 多加一个 <span class="math inline">\(0\)</span>，即：</p><p><span class="math display">\[S_k(n) = \sum_{i=0}^k i^k\]</span></p><p>根据第一类 Stirling 数定义：</p><p><span class="math display">\[\binom{n}{k} = \frac{\prod_{i=n-k+1}^n i}{k!} = \frac{1}{k!}\left[\sum_{i=0}^k(-1)^{i+k}{k\brack i} n^i\right]\]</span></p><p>变形得：</p><p><span class="math display">\[n^k ={\sum_{i=0}^{k-1}(-1)^{i+k}{k\brack i}n^i}-k! \binom{n}{k}\]</span></p><p>累加求和：</p><p><span class="math display">\[\begin{align*}S_k(n) &amp;= \sum_{j=0}^n\left[k!\binom{j}{k} - \sum_{i=0}^{k-1}(-1)^{i+k}{k\brack i} j^i\right]\\&amp;=k!\sum_{j=0}^n\binom{j}{k} - \sum_{i=0}^{k-1}(-1)^{i+k}{k\brack i}\sum_{j=0}^n j^i\end{align*}\]</span></p><p>上指标求和：</p><p><span class="math display">\[S_n(k) = \frac{\prod_{i=n-k+1}^{n+1} i}{k+1}-\sum_{i=0}^{k-1}(-1)^{i+k}{k\brack i}S_i(n)\]</span></p><p>预处理 <span class="math inline">\(O(k^2)\)</span>，询问 <span class="math inline">\(O(k^2)\)</span>。</p><p>但是不用除法。</p><h2>第二类 Stirling 数</h2><p>考虑这样一个式子：</p><p><span class="math display">\[ i^k = \sum\limits_{j=0}^k \begin{Bmatrix}k\\j\end{Bmatrix}\dbinom{i}{j}j!\]</span></p><details class="toggle" ><summary class="toggle-button" style="">证明</summary><div class="toggle-content"><p><span class="math inline">\(i^k\)</span> 可以看成将 <span class="math inline">\(k\)</span> 个互不相同的球放进 <span class="math inline">\(i\)</span> 个互不相同的盒子里。</p><p>那么枚举现在有 <span class="math inline">\(j\)</span> 个非空的盒子，自然乘上 <span class="math inline">\(\begin{Bmatrix}k\\j\end{Bmatrix}\dbinom{i}{j}\)</span>，因为这样是无序的，所以乘上 <span class="math inline">\(j!\)</span> 才是有序的。</p></div></details><p>考虑求 <span class="math inline">\(S_k(n)=\sum_{i=1}^n i^k\)</span>，即为：</p><p><span class="math display">\[\begin{align*}&amp;\sum_{i=1}^n \sum\limits_{j=0}^k \begin{Bmatrix}k\\j\end{Bmatrix}\dbinom{i}{j}j!\\=&amp;\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}j!\sum\limits_{i=1}^n\dbinom{i}{j} \\=&amp;\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}j!\binom{n+1}{j+1}\\=&amp;\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}\dfrac{(n+1)!}{(j+1)(n-j)!}\\=&amp;\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}\dfrac{\prod_{i=n-j+1}^{n+1}i}{(j+1)}\end{align*}\]</span></p><p>预处理斯特林数，还要注意 <span class="math inline">\(j+1\)</span> 在 <span class="math inline">\(P\)</span> 下不一定存在逆元，但分子的某个数一定可以整除它。</p><p>预处理 <span class="math inline">\(O(k^2)\)</span>，询问 <span class="math inline">\(O(k)\)</span>。</p><p>也不用除法。</p>]]></content>
    
    
    <summary type="html">自然数的 k 次幂求和</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="math" scheme="https://xglight.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>2025.10.22-A</title>
    <link href="https://xglight.github.io/posts/67529007/"/>
    <id>https://xglight.github.io/posts/67529007/</id>
    <published>2025-10-22T13:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.077Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a1f482d654b867fc6554187b41dbc84f15e96f90c5fc333d267008d02a4772e4">93024cf999deb8d8b2919f7e109263d436f7768a67e3b41578a0afeefd292b2dcabffd9739f059a2eaa848e67bc2889b57bfb598838a4c2cbce13f193ad9658485b0ade317e39803c6adfa9faf0bb122f3a1e263204a24e236fd8d13e2a5bbd2f7b3ec86f006a093f42b62517007f99cf14c87c45ae705bc88d3c79bcba14b9f3c8bf7d2baa2ea19996962d56ba9f5a785050b019b588616880e56edddbd7946c24c1b0ce965d81b2b28ee2b829db32831e690a46edb44a6d240c2cfd8665ed855b3ef4f024399100a528e612e5ea70f55c1ef4cb1912b612cb787143029019d079f6531fc244bac38eededc5433459cdf3396d42f7a4fe0adabe710ad903bc468806d7ec77ac7b068c08b45f130ba938e6f9e29423ee5244e749971735f9c4b791030f630bcc5ff4bffe558041e724a2893da21d92522ad58c6e44c3ebc6c73472cfdc98862a400da84c9ca0ef8eb5172afcc92fdf4e21db221992200b4b5024aae44135f6fb14e894a446ae933a593aac06c8e6ea1a653fffe58a08ebba6b61b5ebaa34632af51c7d954e44b132fa21d3d79ec1360909bd61f625ed41c4d1cc43e5b8dcb8f4cdbee76e7d44075ad44fff4257321c176f16f9161a97d80d3b71aebf1c512442976706f881666996991bbf55cc9586f46e7ee86dfec06fa80493707d0cc2b684569e13bb0b6831e73cf3e01a0a9c620929117328684ccc21fb8e58af2ed3c663bed22b1239052aebc904c1ae437aaecb7cf503fbf315a26568f47de536de6a220faec26f16eaf1a45c531d7c5d8469186e16082ce8120bef5ea7acce465d53088fe6ca9a86f0dfb5da4c228dc669b8216f266136a438264b05ff6eb248081f94d9042e9cb9c948d7b5e64ea507921514b4b730a99a97eee56fe90df3086aca51e7eb7d6e1d13b6062c23cd62debe8e2bf452d60fcf6cd6bd1389c443b94d1ac0a44821a634ebb900c35c55be29c788a76b75734ed5230f0330b91810bff81624a86e7e066b73339fb6a2c25ad7ea13b416edf1ce7637b190437ecdcc416d946d085775e37dd59e2c8226332ada621a65d68a3070a7e4fd13065b1bebe59fb4bd1cedb3ae47fc438b64ed6535a0e0c06880b8179aa776c6fe198324961b15f9903a57d3663c1c1f57d659abbee40d0a7b0729b43dcad34237d3a7172a39b48e32e1bb1732e492921221855acd1d870b349df497eb866539772c5f2d7c465c786c72a0ebd8dfdcf8a032b5ca6aa152978d23b72bed2fc7e712276cf9c3150f44c20d5d9cf2eeac5a0b0bcd1ca8d56682828c0affbf18e67c5b3c6fd4c14403629955b7b500d532ef0bdf2c5c19f3ab5408279a77cc25fea196438cbfbc740fb14b100a25963d04794b6dec12c23ab2ac54c0ebb6f6eb04a07b90f89075a3a19a03630c29877c503c6af49c3c278ca57e85cdb4cf69442bbb9182062703c239f774c6f8ec249ca9ea5a1e641f24073a159926c193a565673d62b8d20c3f06ecb74aec4e822f9a8780700a101d97fb6c145e9c0595fb8f8a8795a17cb540867e80447b490afa984b9a5bb6b4948945da8f90750573ed8c70b036007a93fbb890360cf2f73b9e0f87e233f56cc90b681043cc82a63dfc5ee3caada7863138fda2f0abadd4c3bb747541cd767f54db8636eaa0bb2ac57aff0d21932364016d6e352b0a7cda09e0578691abc2e6ea5e5f0d2196ce0bc73ddca3aae816bbaedfc5428870dc2dc37edede063a4e862b8297bb86763179e8142167312c67520a5fdbbdfc74e649c054deb74954350571e978670d10eaf7cc7fbb8c744c3d376bb524f0892475b2fba75a912600252455c2bd209f986d38ed2be3097584d94e8462952e2f362b16392a37d1327ffa300f18bec23ba9ef2ece63a848fe70539e8bb4fc7d43e23b6ec4855a77c5fd19f4278bdf4153a91da72b18bf57d2d2f885255f31ef4e9a3b6939c4c4cfa505dc82e99e26a91160d8420400d6bc157a60a389384c8dc07e26c297f466cfc98caf8041495bcb5d9544bcd315f8644dcbcb418842b853d2ac48fe0c71ce0ab2fafb9dd9944f751839713816fca99304dcc6791f034b7960dcc8148e81dcb97fa6f86e0af89f701b02092b37bac791ef36e19980fd62846009dca99345a8d6e953b8799c892e9ea399b1d52add9213f90f1060fdb6730247b76b81cae42405da93a489f19dc267c5a640b73d782c647a9fdae70f5361d2d6f88a7c14411e36df877e44bd7d91343c04a8f3a26cbed58faa4073f7c37ad4acb3d5f73f8fbd7a3f89f7f6ab8cf61756218669ecc66d71f9ef95e9bd6962dd2569c504d3cec0116e71c2c757714037fa18e7de4a7cbfc8fb6e03abff90f356bd63ff3dc8e369dcebfb24e68d9a9f6730cf7001a4d8c56d5fcfa659a63d6964fe22c1530a7494431aa35b9813689a25397c2dcb54c3866231eccbdf675e0e7f7d847f8a79fd641b82cc0ba5e3e71a17e89b3fcbb250fb42495c92bf8ef8a960dda55a38e80c538d34c1dcc52aea7674dbdc845df9af0fcd73f52c0e563d6ac63ebd1389105d6f8d6a1458a61cc0fa871211a582ef229a8adb3665c359d5b0c385e412e2c494cbc1e4be85841aa29b4ec01bb9ad666d00b014ec7a76a52dc47554692d6659cf970cca9a416be66760cfc908d58e284fc7e53d3034a108da4865b989dd213460c698ac0fa6cad85163ebbfc722d04b26d40a097e8cbe7b22bb11345345dc47155fd7be87d43fe220cf20152e40b2bea822daa8ec3ca22f6bd4063ca016bc89967be8abc71504997f592d9f574be31173acde8e87b18e0543cbdb6af95124116de51fa7626b8ca4d70a2aa4dcc53f155c35e07830d874534878f0fd6562bde56db8258de432da69c2f763b927c78308162b32e5c92aa6dd59f34015ec4938f4dd5eb06d68f7dd93a416b23e2568ed35d78f76a773da225e8392d67d1d631cae2ce02c4e63ea862c6dd975e33388e7159bc4de662d35a323f6df95b7d9bc4a78bec4dc92b5187989bf78c0efa25439fcc1401c84de6d67c7b9692151b0b2058f2dba56ba2142d38b7ea2503ec9a92795c1c7f485397fe430f919327ad5d5454fed3c85b68500a2aeb0b26a454824091713c7ed7c7c8d53176bdec818f1f8d2a1278f7d7df59f7144b0b3cf746660f9774c8e81248fbfc780b8de1ec81804d82cd76760829adcae7d015b5cbc52188496539f8a29cef2b54fc79fad88b4a36c19b0e579595bbaf0111bf5d7a785aad153f2c1508677d16ee5af819cbcf21f3d7c0efd46b8733e712ed2942b90d919ce15cf843fade7e9c0300b9fca07ec9fc2a32aeb911e65a5ae7395b75a3bb59a8a3dc2cd3185d639ee6e34e7e8cf85cf5ec5757cb4d6b8c29ce3673ceeed29ebb6f52b74582b1c789118bb84d936327f43e36ad5eb8a587445ca46325bc03f919771727f70e2a3bd55fa0f2b18c2694cb18fa27257ab144d4e14520ef35613b9e81828d8683415724784282b557aa70b709042b32ce275adf7b19a9074f9b968a1b3272c53716496b273a3827eef3fdfc0f2415ecc0fe6043fb33873ce88bcb2ec50b94f6b7fb6f5c625b2a03d83c5ec6dfc38593c8d0e60757c2283f6d22bb1b34e059051972111d3e9f2cd6555e596de1bbb6b27721aa745481af533ef0a6c48079b4fa8f5633070e284067d13411fb182070fe4484cf36ffdd228af657203a86920b413a85576550bd04f1988c3eb7eb9ac2d849393f45ed611a9b0f6e2d56f07ec77c2a94557e7e3bb32af27e09ae39daafca984f5a396e11a94d5fd8c4214ee8d66d2aacf7336aedfe436e3c88803f2c29f68da1aae487d68dcc43c46777993fde1a429469bd0fa9c3bf060e092a4fa5f25c3b29d3eb5b21596287574d714b479c256824f42152c8d5cd0ce836fb0997a6a18a0f52fb357c45bbf1765ef18a1bb2b5938dc65cab51cf523ac5c9b0a4eca1c17b5b98fce0633594bee248d045632b61459d7e09cf55cea9e67f3555a7c957ac43fc5c9cf9ec839a1b87146fd27beee118014884cec51e172a15e9afb890fd3804fe8d4fa802eb04045b456220d7e6a7e950aa3f9cff942aaa975c90ba8213e65a2e3b5549fdf29c8014ae7a873a89ad12f0cc6d1a8873a570df5cf8d50b3de0486064a352fe50af6fedf937ae10bd13c6333cded5bb207c3ac395240c80ba53d9aac70faf487fbdfd7123eba4a87737a5038bfa6846ecdabb20dbe6bf6b7bc3804fae272771c9ac0f9f08f10aeaf118f3687c3b1be1cabca1253d8f82437a70dfa27715cc372504fd186cfe81eaaa771aba7ae225d2ef8bffb200c2c62bb8b7c2b672272fd10e8bd54ff1f4b292fc342ad9097b545be7956522fa270eb86555c3ccf6997b75693c7e548a3ffb3ee5fa3c1f1eb03142469f1e0d4dab36f13917bbf79cfa7b2b2e8c27e69b41434debd99e8100f16c81742c56e90b4532e73ea692714b50efabf0a363c90e9d7fa86e39eddfe265336cccfb18acd04f6a6317a8be50c261a6935312d75eb89cd0b9678cfab632335cd9911ba54ba193fba806b7dfd96580bffd5fa779420cbbd66079ebf3f97aa8bfee667d876b463707f170e2bd3b42927d4eed1ccf02a372d35a1f8aff98f1ff5f4a8de9de8b99841fb7e3e078e61d8e902ce37e37a21d10ac57c92ab07db5030ecefa2638cd2c7a8fd4bf41c146fa2651421ee830c49e5e1bb3db809f717a295078fb2cefbc223893ddc6501113647656e8a3baefe284571cbf2bac5fd733ad365f0ec90f0da5c9b4c1e7e7750c62e8673b7a792fdb6c9360d3257e5ae0c86dac00201d35227f25a63c8875ea7c0a853135a88545a29edcc7a320cf7d8cfcae4db98be4c6b9714bea1094ac6bd5cc734d5549cdb602ef839c820b1c5bd1c64f7874c1d26cac80b64c18d33ccc189327c78a08e537a5f5d59b7b5e661c2120decd1fa53bf1d67f0f06726de06ca67092c4e493f2bb4ee7ec8f0891d33afdeb16927cc39916d8aca288f89f29fd29dcdb347c0a9fa65c11e5f1dfaec828662402a6b30e8d49abec6dc72f8406b508b6b7de96ea914b14823b3f90e3726e0ec8c73d428e8204c9997b07407df8e5466c914339c18129e0af29c3ee83bd03fcde3165a720a5bca52067bc14564a764d45c4e1c296eb71311b7c89646776116951ebe9c4a91954047b196ad820e25b614a79a0a8e56f58e0d7f42d4b4c09c3c7b4b8b732a215ce5c8ac17d7ca01e0ec4fb9305e28beb55788c63c81eead0322c829513a5097ef24c4b869199f19d32af2e8286938b8b946f446ab5dd9600e473c6e6949904043a7e0d8e4701bd72e8ff7cdbb278fa89a21ec86dd3ba79ac6d8a7f39be326c0c2287f55204bfb519bff8aeab4c06421ef21e6699064452df94ac3a651595928b576b1c4e4e715ce7c4aaa906bca49c0e6851ca1be45851bbf507de1dca2ebaad6e76cf66f207468eb6459a9713bbb718bd9db7e078afd6e6ee077b92b4a8725419d96d391efec984d0198cf886dfa6ad5c3395551df06ccadd927838</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">2025.10.22-A 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="school" scheme="https://xglight.github.io/tags/school/"/>
    
  </entry>
  
  <entry>
    <title>c++11 的多线程</title>
    <link href="https://xglight.github.io/posts/151b1912/"/>
    <id>https://xglight.github.io/posts/151b1912/</id>
    <published>2025-10-16T04:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[<h2>多线程编程</h2><p>多线程编程，并发编程的一种，即在同一个进程中执行多个线程，每个线程都有独立的栈、指令计数器，但共享同一个内存空间（堆、全局变量等），可以让程序在多核 CPU 上并行执行，从而更快更高效喵！。</p><p>但是由于缺少系统的保护机制，多线程编程容易出现数据竞争和死锁等问题。</p><h2>C++11 中的多线程</h2><div class="note info flat"><p>编译器版本：Clang 21.1.1</p></div><div class="note info flat"><p>C++ 标准：C++11</p></div><p>多线程在 C++11 被引入，其工具集在 C++11 已经比较完善，主要分为五个板块：</p><ol type="1"><li>线程管理：<code>thread</code></li><li>互斥锁：<code>mutex</code></li><li>线程同步：<code>condition_variable</code></li><li>原子操作：<code>atomic</code></li><li>异步操作：<code>future</code> 和 <code>async</code></li></ol><h2>thread 线程类</h2><p><code>std::thread</code> 单个执行线程的类，用于创建和管理线程。</p><p><strong>构造函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::thread t1; <span class="comment">//  默认构造函数，默认不执行</span></span><br><span class="line"><span class="function">std::thread <span class="title">t2</span><span class="params">(func, arg1, arg2)</span></span>; <span class="comment">//  构造函数，传入函数和参数，执行线程</span></span><br></pre></td></tr></table></figure><p><strong>成员函数</strong></p><ul><li><code>join()</code>：等待线程执行结束，阻塞当前线程，直到线程执行结束。</li><li><code>detach()</code>：将线程与 <code>thread</code> 对象分离，允许线程独立执行（守护线程）。</li><li><code>joinable</code>：检查线程是否可被 <code>join()</code>，即在运行且未被分离。</li><li><code>get_id()</code> ：获取线程的唯一标识符。</li><li><code>hardware_concurrency()</code>：静态函数，返回系统硬件支持的并发线程数。</li></ul><h2>mutex 互斥锁类</h2><p><code>std::mutex</code> 保护共享数据，防止多个线程同时访问导致数据竞争。</p><h3>std::mutex</h3><p>最基本的互斥锁，不可递归锁定。</p><p><strong>成员函数</strong></p><ul><li><code>lock()</code>：获取互斥锁，如果互斥锁已经被其他线程锁定，则阻塞当前线程，直到互斥锁被释放。</li><li><code>try_lock()</code>：尝试获取互斥锁，如果互斥锁已经被其他线程锁定，则立即返回 <code>false</code>，否则获取锁并返回 <code>true</code>。</li><li><code>unlock()</code>：释放互斥锁。</li></ul><h3>std::recursive_mutex</h3><p>允许同一线程多次锁定同一个互斥锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">std::recursive_mutex rec_mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">recursive_function</span><span class="params">(<span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::recursive_mutex&gt; <span class="title">lock</span><span class="params">(rec_mtx)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (depth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">recursive_function</span>(depth - <span class="number">1</span>); <span class="comment">// 可以递归调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>std::timed_mutex</h3><p>带超时功能的互斥锁。</p><p><strong>成员函数</strong></p><ul><li><code>try_lock_for(const chrono::duration&lt;Rep, Period&gt;&amp; timeout_duration)</code>：尝试获取互斥锁，如果互斥锁已经被其他线程锁定，则在指定时间内阻塞当前线程，直到互斥锁被释放或超时，成功获取锁返回 <code>true</code>，超时返回 <code>false</code>。</li><li><code>try_lock_until(const chrono::time_point&lt;chrono::system_clock, chrono::duration&lt;Rep, Period&gt;&gt;&amp; timeout_time)</code>：尝试获取互斥锁，如果互斥锁已经被其他线程锁定，则在时间点之前阻塞当前线程，直到互斥锁被释放或超时，成功获取锁返回 <code>true</code>，超时返回 <code>false</code>。</li></ul><h3>std::lock_guard</h3><p>RAII 风格的锁管理器，构造时锁定，析构时自动解锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::mutex mtx;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    <span class="comment">// 代码块 </span></span><br><span class="line">&#125;<span class="comment">// 自动解锁</span></span><br></pre></td></tr></table></figure><h3>std::unique_lock</h3><p>更灵活的锁管理器，可以选择手动锁定和解锁，也可以选择超时时间。</p><p><strong>成员函数</strong></p><ul><li><code>lock()</code>：手动锁定互斥锁。</li><li><code>try_lock()</code>：尝试手动锁定互斥锁，如果互斥锁已经被其他线程锁定，则立即返回 <code>false</code>，否则获取锁并返回 <code>true</code>。</li><li><code>unlock()</code>：手动解锁互斥锁。</li><li><code>release()</code>：释放所有权，不解锁。</li><li><code>defer_lock</code>：创建但不锁定互斥锁。</li><li><code>adopt_lock</code>：接管已加锁的互斥量，避免重复加锁。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">std::mutex mtx1, mtx2;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock1</span><span class="params">(mtx1, std::defer_lock)</span></span>; <span class="comment">// 创建，但不锁定</span></span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock2</span><span class="params">(mtx2, std::defer_lock)</span></span>; <span class="comment">// 创建，但不锁定</span></span><br><span class="line">    lock<span class="number">1.l</span>ock(); <span class="comment">// 手动锁定 mtx1</span></span><br><span class="line">    lock<span class="number">2.l</span>ock(); <span class="comment">// 手动锁定 mtx2</span></span><br><span class="line">    <span class="comment">// 也可使用 std::lock(lock1, lock2) 一次性锁定</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">    lock<span class="number">1.</span><span class="built_in">unlock</span>(); <span class="comment">// 手动解锁 mtx1</span></span><br><span class="line">&#125; <span class="comment">// 自动解锁 mtx2</span></span><br></pre></td></tr></table></figure><h2>condition_variable 条件变量类</h2><ul><li>允许一个或多个线程等待某个条件成立。</li><li>其他线程可以通过 <code>notify_one()</code> 或 <code>notify_all()</code> 来唤醒等待的线程。</li><li>等待线程会自动释放锁，进入阻塞状态，直到被唤醒并重新获得锁。</li></ul><p><strong>成员函数</strong></p><ul><li><code>wait(lock)</code>：使当前线程阻塞，直到被通知。</li><li><code>wait(lock,pred)</code>：使当前线程阻塞，直到被通知且 <code>pred()</code> 返回 <code>true</code>。</li><li><code>notify_one()</code>：通知一个等待线程。</li><li><code>notify_all()</code>：通知所有等待线程。</li><li><code>wait_for()</code>：等待指定时间，直到被通知且条件满足或者超时，条件满足返回 <code>true</code>，超时返回 <code>false</code>。</li><li><code>wait_until()</code>：等待到指定时间点，直到被通知且条件满足或者超时，条件满足返回 <code>true</code>，超时返回 <code>false</code>。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line">std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Produced: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        cv.<span class="built_in">notify_one</span>(); <span class="comment">// 通知消费者</span></span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        cv.<span class="built_in">wait</span>(lock, []&#123; <span class="keyword">return</span> !q.<span class="built_in">empty</span>(); &#125;); <span class="comment">// 等待队列非空</span></span><br><span class="line">        <span class="type">int</span> val = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Consumed: &quot;</span> &lt;&lt; val &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(producer)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(consumer)</span></span>;</span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>atomic 原子操作类</h2><p>用于在多线程环境中执行无锁的原子操作，从而避免数据竞争并提升性能。</p><p><strong>构造函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::atomic&lt;<span class="type">int</span>&gt; <span class="title">counter</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">std::atomic&lt;<span class="type">bool</span>&gt; <span class="title">flag</span><span class="params">(<span class="literal">true</span>)</span></span>;</span><br><span class="line"><span class="function">std::atomic&lt;<span class="type">void</span>*&gt; <span class="title">ptr</span><span class="params">(<span class="literal">nullptr</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>成员函数</strong></p><ul><li><code>load()</code>：获取原子变量的值。</li><li><code>store()</code>：设置原子变量的值。</li><li><code>fetch_add()</code>：将原子变量的值加上指定值，并返回原值。</li><li><code>fetch_sub()</code>：将原子变量的值减去指定值，并返回原值。</li><li><code>exchange()</code>：交换值并返回原值。</li><li><code>compare_exchange_strong(expected, desired)</code>：如果当前值等于 <code>expected</code>，则将原子变量的值设置为 <code>desired</code>，并返回 <code>true</code>；否则，返回 <code>false</code>。</li><li><code>compare_exchange_weak(expected, desired)</code>：基本同 <code>compare_exchange_strong</code>。</li></ul><details class="toggle" ><summary class="toggle-button" style="">`strong` 和 `weak` 的区别</summary><div class="toggle-content"><div class="note warning flat"><p>某些平台的硬件指令（如 ARM）在实现 CAS 时可能会偶尔失败，即使值匹配。</p></div><p><code>compare_exchange_strong</code> 不允许虚假失败；但 <code>compare_exchange_weak</code> 允许，即值相同也可能失败，但同时性能更高。</p><p>所以 <code>compare_exchange_strong</code> 比较适合用于确保原子操作的成功，而 <code>compare_exchange_weak</code> 适合用于提升性能（在循环中使用）。</p></div></details><p><strong>内存序</strong></p><p>在多线程程序中，编译器和 CPU 为了优化性能，可能会对指令进行重排，这意味着你写在前面的代码，可能在执行时被放到后面，或者被其他线程看到的顺序不同。</p><p>内存序（memoryorder）就是用来控制这种重排行为的机制，确保线程之间的操作顺序符合预期。</p><table><thead><tr class="header"><th style="text-align: center;">内存序</th><th style="text-align: center;">同步相关</th><th style="text-align: center;">重拍相关</th><th style="text-align: center;">应用场景</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>memory_order_relaxed</code></td><td style="text-align: center;">不同步</td><td style="text-align: center;">允许重排</td><td style="text-align: center;">高性能计数器、无依赖场景</td></tr><tr class="even"><td style="text-align: center;"><code>memory_order_acquire</code></td><td style="text-align: center;">同步之前写入</td><td style="text-align: center;">禁止后面的重排到前面</td><td style="text-align: center;">读取标志位后读取数据</td></tr><tr class="odd"><td style="text-align: center;"><code>memory_order_release</code></td><td style="text-align: center;">同步之后读取</td><td style="text-align: center;">禁止前面的重排到后面</td><td style="text-align: center;">写入数据后设置标志位</td></tr><tr class="even"><td style="text-align: center;"><code>memory_order_acq_rel</code></td><td style="text-align: center;">同步前后</td><td style="text-align: center;">双向禁止重排</td><td style="text-align: center;">读写结合的同步点</td></tr><tr class="odd"><td style="text-align: center;"><code>memory_order_seq_cst</code></td><td style="text-align: center;">同步所有线程</td><td style="text-align: center;">全局顺序一致</td><td style="text-align: center;">默认，最安全但性能差</td></tr></tbody></table><h2>async 异步操作类</h2><p>标准库引入了一整套用于 <strong>异步操作</strong> 的类和机制，使得多线程编程更加现代化和易用。</p><h3>std::async</h3><p>异步执行函数，返回 <code>std::future</code>。</p><p><strong>构造函数</strong></p><ul><li><code>std::launch::async</code>：立即在新线程中执行。</li><li><code>std::launch::deferred</code>：延迟执行，直到 <code>std::future::get()</code> 被调用。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::future&lt;T&gt; f = std::<span class="built_in">async</span>(std::launch::deferred, func, arg1, arg2);</span><br><span class="line"></span><br><span class="line">f.<span class="built_in">get</span>(); <span class="comment">// 阻塞，直到结果可用</span></span><br></pre></td></tr></table></figure><h3>std::future</h3><p>提供对异步操作结果的访问，表示一个尚未完成的异步操作的结果。</p><p><strong>成员函数</strong></p><ul><li><code>get()</code>：等待异步操作完成，并返回结果。</li><li><code>wait()</code>：等待异步操作完成。</li><li><code>wait_for()</code>：等待指定时间，直到异步操作完成或超时。</li><li><code>valid()</code>：检查异步操作是否有效。</li><li><code>get_future()</code>：从 <code>promise</code> 或 <code>packaged_task</code> 获取 <code>std::future</code> 对象。</li></ul><h3>std::promise</h3><p>存储值或异常，供 <code>std::future</code> 读取。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker</span><span class="params">(std::promise&lt;<span class="type">int</span>&gt; prom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="built_in">perform_calculation</span>();</span><br><span class="line">        prom.<span class="built_in">set_value</span>(result); <span class="comment">// 设置结果</span></span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">        prom.<span class="built_in">set_exception</span>(std::<span class="built_in">current_exception</span>()); <span class="comment">// 设置异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::promise&lt;<span class="type">int</span>&gt; prom;</span><br><span class="line">std::future&lt;<span class="type">int</span>&gt; fut = prom.<span class="built_in">get_future</span>(); <span class="comment">// 获取 future</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(producer, std::ref(prom))</span></span>;</span><br><span class="line"></span><br><span class="line">fut.<span class="built_in">get</span>(); <span class="comment">// 阻塞直到结果可用</span></span><br><span class="line">t.<span class="built_in">join</span>();</span><br></pre></td></tr></table></figure><h3>std::packaged_task</h3><p>将可调用对象包装为异步任务。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::packaged_task&lt;<span class="title">int</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>&gt; <span class="title">task</span><span class="params">(compute)</span></span>;</span><br><span class="line">std::future&lt;<span class="type">int</span>&gt; fut = task.<span class="built_in">get_future</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在单独线程中执行</span></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(std::move(task), <span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> result = fut.<span class="built_in">get</span>();</span><br><span class="line">t.<span class="built_in">join</span>();</span><br></pre></td></tr></table></figure><h2>实用函数</h2><ul><li><code>sleep_for()</code>：使当前线程睡眠指定时间。</li><li><code>sleep_until()</code>：使当前线程睡眠到指定时间点。</li><li><code>yield()</code>：让出当前线程的执行权。</li></ul>]]></content>
    
    
    <summary type="html">c++11 的多线程详解，包括 thread,mutex,async 等。</summary>
    
    
    
    <category term="algorithm" scheme="https://xglight.github.io/categories/algorithm/"/>
    
    
    <category term="c++" scheme="https://xglight.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>2025.10.14-A</title>
    <link href="https://xglight.github.io/posts/716a435b/"/>
    <id>https://xglight.github.io/posts/716a435b/</id>
    <published>2025-10-14T13:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.077Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="bece7e15bf17339368061e7d9051e99987da8ad659bc92efe9c375cb31092658"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">2025.10.14-A 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="math" scheme="https://xglight.github.io/tags/math/"/>
    
    <category term="school" scheme="https://xglight.github.io/tags/school/"/>
    
  </entry>
  
  <entry>
    <title>ABC 427 总结</title>
    <link href="https://xglight.github.io/posts/49c5faa7/"/>
    <id>https://xglight.github.io/posts/49c5faa7/</id>
    <published>2025-10-11T14:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[<h2>A</h2><p>简单题。</p><h2>B</h2><p>简单题。</p><h2>C</h2><p>简单题，可以枚举二分图的左部点。</p><h2>D</h2><p>简单题，DFS 即可。</p><h2>E</h2><p>赛时考虑移动 <span class="math inline">\(T\)</span>，但死活调不出来。</p><p>赛后用 bitset 存整个图，一遍过，而且打的飞快。</p><h2>F</h2><p>双端搜索，用 <span class="math inline">\(f\)</span> 存前 <span class="math inline">\(\frac{n}{2}\)</span> 个数可能的子集和，<span class="math inline">\(g\)</span> 存后 <span class="math inline">\(\frac{n}{2}\)</span> 个数可能的子集和。</p><p>不过要分别记两个，中间不能同时选。</p><p>排序后二分计算，不过可以用 <code>equal_range</code>。</p><h2>G</h2><p>赛时没想到。</p><p>记 <span class="math inline">\(t_P(T)\)</span> 表示初始心情为 <span class="math inline">\(T\)</span>，按顺序收到 <span class="math inline">\(P\)</span> 礼物后的最终心情。</p><p>定义一个 <strong>好的</strong> 序列 <span class="math inline">\(P_1, P_2, \cdots, P_n\)</span>，当且仅当 <span class="math inline">\(\forall i \in [1, n),P_i + A \le P_{i+1}\)</span>。</p><p>对于一个 <strong>好的</strong> 序列，一定存在一个整数 <span class="math inline">\(x\)</span> 使得：</p><ul><li><span class="math inline">\(\forall i \in [1,x)\)</span>，收到礼物 <span class="math inline">\(P_i\)</span> 一定 <strong>失望</strong>。</li><li><span class="math inline">\(\forall i \in [x, n)\)</span>，收到礼物 <span class="math inline">\(P_i\)</span> 一定 <strong>高兴</strong>。</li></ul><p>对于两个序列 <span class="math inline">\(P,Q\)</span>，若 <span class="math inline">\(t_P(T) = t_Q(T)\)</span>，则称两个序列是等价的，不难证明两个等价序列的长度一定相等。</p>]]></content>
    
    
    <summary type="html">ABC 427 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="atcoder" scheme="https://xglight.github.io/tags/atcoder/"/>
    
  </entry>
  
  <entry>
    <title>STL</title>
    <link href="https://xglight.github.io/posts/3006dc10/"/>
    <id>https://xglight.github.io/posts/3006dc10/</id>
    <published>2025-10-11T09:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[<h2>简介</h2><p>C++ 标准模板库（Standard Template Library，STL）是一套功能强大的 C++ 模板类和函数的集合，它提供了一系列通用的、可复用的算法和数据结构。</p><p>STL 分为多个组件，包括容器（Containers）、迭代器（Iterators）、算法（Algorithms）、函数对象（Function Objects）和适配器（Adapters）等。</p><p>使用 STL 的好处:</p><ul><li>代码复用：STL 提供了大量的通用数据结构和算法，可以减少重复编写代码的工作。</li><li>性能优化：STL 中的算法和数据结构都经过了优化，以提供最佳的性能。</li><li>泛型编程：使用模板，STL 支持泛型编程，使得算法和数据结构可以适用于任何数据类型。</li><li>易于维护：STL 的设计使得代码更加模块化，易于阅读和维护。</li></ul><h2>容器</h2><h3>vector</h3><p>vector 是 STL 中的动态数组容器，定义在 <code>&lt;vector&gt;</code> 头文件中。</p><p>特性：</p><ul><li>随机访问：支持随机访问，可以快速访问任意位置的元素。</li><li>动态数组：可以动态扩容，可以根据需要增加或减少元素。</li><li>连续存储：支持连续内存存储，便于与 C 风格数组交互。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; v;        <span class="comment">// 空 vector</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;    <span class="comment">// 10 个默认值为 0 的 vector</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>, <span class="number">1</span>)</span></span>; <span class="comment">// 10 个值为 1 的 vector</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v1</span><span class="params">(v2)</span></span>;   <span class="comment">// 拷贝 vector v2</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(v<span class="number">2.</span>begin(), v<span class="number">2.</span>end())</span></span>; <span class="comment">// 利用范围构造函数</span></span><br></pre></td></tr></table></figure><p>注：vector 的构造函数默认为空。</p><p><strong>成员函数</strong></p><div class="tabs"><div class="nav-tabs no-default"></div><div class="tab-contents"></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><div class="note warning flat"><p>请注意区分 <strong>容量</strong> 和 <strong>大小</strong> 的概念，vector 实际占用的内存空间相当于容量。</p></div><ul><li>容量：指的是 vector 预留的内存空间大小，可以动态增加或减少。</li><li>大小：指的是 vector 中实际存储的元素个数。</li></ul><p><strong>释放 vector 内存</strong></p><ol type="1"><li><code>vector&lt;T&gt;().swap(v)</code>。</li><li><code>v.clear(), v.shrink_to_fit()</code>。</li></ol><h3>deque</h3><p>deque 是 STL 中的双端队列容器，定义在 <code>&lt;deque&gt;</code> 头文件中。</p><p>特性：</p><ul><li>支持 <strong>两端</strong> 高效插入和删除。</li><li>随机访问常数较大。</li></ul><p><strong>成员函数</strong></p><div class="tabs"><div class="nav-tabs no-default"></div><div class="tab-contents"></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2>迭代器</h2><h2>算法</h2><h2>函数对象（functional）</h2><h3>函数对象</h3><table><thead><tr class="header"><th style="text-align: center;">类名</th><th style="text-align: center;">功能</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>plus&lt;T&gt;</code></td><td style="text-align: center;">加法</td></tr><tr class="even"><td style="text-align: center;"><code>multiplies&lt;T&gt;</code></td><td style="text-align: center;">乘法</td></tr><tr class="odd"><td style="text-align: center;"><code>divides&lt;T&gt;</code></td><td style="text-align: center;">除法</td></tr><tr class="even"><td style="text-align: center;"><code>modulus&lt;T&gt;</code></td><td style="text-align: center;">模运算</td></tr><tr class="odd"><td style="text-align: center;"><code>negate&lt;T&gt;</code></td><td style="text-align: center;">取负</td></tr><tr class="even"><td style="text-align: center;"><code>equal_to&lt;T&gt;</code></td><td style="text-align: center;">等于</td></tr><tr class="odd"><td style="text-align: center;"><code>not_equal_to&lt;T&gt;</code></td><td style="text-align: center;">不等于</td></tr><tr class="even"><td style="text-align: center;"><code>greater&lt;T&gt;</code></td><td style="text-align: center;">大于</td></tr><tr class="odd"><td style="text-align: center;"><code>less&lt;T&gt;</code></td><td style="text-align: center;">小于</td></tr><tr class="even"><td style="text-align: center;"><code>greater_equal&lt;T&gt;</code></td><td style="text-align: center;">大于等于</td></tr><tr class="odd"><td style="text-align: center;"><code>less_equal&lt;T&gt;</code></td><td style="text-align: center;">小于等于</td></tr></tbody></table><p>还有一些，可以自行查阅头文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> c = std::<span class="built_in">plus</span>&lt;<span class="type">int</span>&gt;()(a, b); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), std::<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()); <span class="comment">// 降序排序</span></span><br></pre></td></tr></table></figure><h3>function</h3><p>一个 <strong>通用函数包装器</strong>，可以保存函数指针、lambda、函数对象、成员函数指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    function&lt;<span class="type">int</span>(<span class="type">int</span>,<span class="type">int</span>)&gt; f = add; <span class="comment">// 保存函数指针</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">f</span>(<span class="number">3</span>,<span class="number">4</span>) &lt;&lt; endl;         <span class="comment">// 输出 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>bind</h3><p>一个 <strong>参数绑定器</strong>，可以将参数绑定到函数上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123; <span class="keyword">return</span> a+b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">bind</span>(add, <span class="number">10</span>, placeholders::_1); <span class="comment">// 固定 a=10, b 为参数</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">f</span>(<span class="number">5</span>) &lt;&lt; endl;                     <span class="comment">// 输出 15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>哈希函数</h3><p><code>std::hash&lt;T&gt;</code> 可以获取对象的哈希值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;string,<span class="type">int</span>,hash&lt;string&gt;&gt; mp;</span><br></pre></td></tr></table></figure><h2>适配器</h2>]]></content>
    
    
    <summary type="html">STL（Standard Template Library），中文名标准模板库，是一系列模板类和函数的集合，是 C++ 的一种编程范式。</summary>
    
    
    
    <category term="algorithm" scheme="https://xglight.github.io/categories/algorithm/"/>
    
    
    <category term="c++" scheme="https://xglight.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++ 库 chrono</title>
    <link href="https://xglight.github.io/posts/7b504e68/"/>
    <id>https://xglight.github.io/posts/7b504e68/</id>
    <published>2025-10-11T09:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[<p>C++11 引入的 <code>chrono</code> 库，用于处理时间、计时和时间点，主要提供三类核心概念。</p><h3>duration（持续时间）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::chrono::duration&lt;Rep, Period&gt;</span><br></pre></td></tr></table></figure><p><code>Rep</code> 表示持续时间的类型，<code>Period</code> 表示时间单位。</p><p>常用别名:</p><ul><li><code>std::chrono::seconds</code> 秒</li><li><code>std::chrono::milliseconds</code> 毫秒</li><li><code>std::chrono::microseconds</code> 微秒</li><li><code>std::chrono::nanoseconds</code> 纳秒</li><li><code>std::chrono::minutes</code> 分钟</li><li><code>std::chrono::hours</code> 小时</li></ul><h3>time_point（时间点）</h3><p>表示某个具体时刻。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::chrono::time_point&lt;Clock, Duration&gt;</span><br></pre></td></tr></table></figure><p><code>Clock</code> 表示时钟类型，<code>Duration</code> 表示时间间隔类型。</p><h3>clock（时钟）</h3><p>提供获取当前时间的函数。</p><ul><li><code>steady_clock</code> 单调递增，不受系统时间调整影响，适合计时。</li><li><code>system_clock</code> 系统时间，可转换为日历时间。</li><li><code>high_resolution_clock</code> 高精度计时。</li></ul><h3>使用</h3><p><strong>获取当前时间点</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> start = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br></pre></td></tr></table></figure><p><strong>计时</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> start = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="comment">// 代码片段</span></span><br><span class="line"><span class="keyword">auto</span> end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span> duration = <span class="built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(end - start);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Time used: &quot;</span> &lt;&lt; duration.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; microseconds&quot;</span> &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p><strong>返回 <code>epoch</code> 到当前时间点的偏移量，并把这个时间间隔以整数形式表示</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>(); <span class="comment">// 常用于初始化随机数种子</span></span><br></pre></td></tr></table></figure><p>不同 <code>Clock</code> 类型的 <code>spoch</code> 不一样：</p><ul><li><code>steady_clock</code> 的 <code>spoch</code> 通常为 <strong>系统启动时间</strong>。</li><li><code>system_clock</code> 的 <code>spoch</code> 通常为 <strong>1970-01-01 00:00:00 UTC</strong> 。</li></ul>]]></content>
    
    
    <summary type="html">在 C++ 中，正确使用 chrono 库计时</summary>
    
    
    
    <category term="algorithm" scheme="https://xglight.github.io/categories/algorithm/"/>
    
    
    <category term="c++" scheme="https://xglight.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++ 中的 Lambda</title>
    <link href="https://xglight.github.io/posts/eeb037c6/"/>
    <id>https://xglight.github.io/posts/eeb037c6/</id>
    <published>2025-10-11T09:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <summary type="html">在 C++ 中，正确使用 chrono 库计时</summary>
    
    
    
    <category term="algorithm" scheme="https://xglight.github.io/categories/algorithm/"/>
    
    
    <category term="c++" scheme="https://xglight.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++ 中的随机化</title>
    <link href="https://xglight.github.io/posts/ced3a8ad/"/>
    <id>https://xglight.github.io/posts/ced3a8ad/</id>
    <published>2025-10-11T09:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[<p>mt19937 是 C++11 引入的伪随机数生成器，使用 <strong>梅森旋转</strong>（Mersenne Twister）算法。</p><p>相较于 <code>rand</code> 它的周期更长（<span class="math inline">\(2^19937 -1\)</span>），生成的随机数更加均匀，速度更快，<strong>但仍然是可预测的</strong>。</p><h3>定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::mt19937 <span class="title">rng</span><span class="params">(seed)</span></span>; <span class="comment">// 这里 seed 为任意整数</span></span><br><span class="line"><span class="function">std::mt19937 <span class="title">rng</span><span class="params">(std::chrono::steady_clock::now().time_since_epoch().count())</span></span>; <span class="comment">// 一般用当前时间作为种子</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::mt19937_64 <span class="title">rng</span><span class="params">(seed)</span></span>; <span class="comment">// 64 位版本</span></span><br></pre></td></tr></table></figure><p>调用 <code>rng()</code> 即可生成在 <span class="math inline">\([0, 2^32 - 1]\)</span> 范围内的随机数，<span class="math inline">\(64\)</span> 位版本的 <code>rng()</code> 则在 <span class="math inline">\([0, 2^64 - 1]\)</span> 范围内。</p><p>一些成员函数：</p><ul><li><code>.seed(unsigned)</code> 重新设置种子。</li><li><code>.discard(n)</code> 跳过 <span class="math inline">\(n\)</span> 个结果。</li><li><code>.min()</code> 和 <code>.max()</code> 返回随机数的最小值和最大值。</li></ul><h3>random_device</h3><p>如果不想使用伪随机，可以使用 <code>std::random_device</code> 来获取硬件随机数。</p><div class="note warning flat"><p>C++ 标准规定 <code>std::random_device</code> 可以退化为伪随机数</p></div><p>但一般来说，在 Windows，Linux，macOS 上，<code>std::random_device</code> 都是硬件随机数生成器。</p><p>可以通过其成员函数 <code>.entropy()</code> 来获取硬件随机数生成器的熵，如果大于 <span class="math inline">\(0\)</span>，一般都是真随机数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::random_device rd;</span><br><span class="line"><span class="function">std::mt19937 <span class="title">rng</span><span class="params">(rd())</span></span>; <span class="comment">// 用硬件随机数生成器初始化 mt19937</span></span><br></pre></td></tr></table></figure><p>请不要滥用 <code>std::random_device</code>：</p><ol type="1"><li>它的速度更慢。</li><li>有研究指出，在熵池耗尽后，<code>std::random_device</code> 可能退化为伪随机数，并且性能急剧下降。</li></ol><p>关于 <strong>熵</strong> 的更多内容，读者可以查阅更多资料。</p><h3>均匀分布</h3><p>mt19937 还提供了 <strong>分布类</strong>，用于生成一定范围内均匀分布的随机数。</p><p><strong>均匀分布整数</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(a, b)</span></span>; <span class="comment">// [a, b] 范围内均匀分布整数</span></span><br><span class="line"><span class="type">int</span> x = <span class="built_in">dist</span>(rng);</span><br></pre></td></tr></table></figure><p><strong>均匀分布浮点数</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::uniform_real_distribution&lt;<span class="type">double</span>&gt; <span class="title">dist</span><span class="params">(a, b)</span></span>; <span class="comment">// [a, b] 范围内均匀分布浮点数</span></span><br><span class="line"><span class="type">double</span> x = <span class="built_in">dist</span>(rng);</span><br></pre></td></tr></table></figure><p><strong>正态分布</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::normal_distribution&lt;<span class="type">double</span>&gt; <span class="title">dist</span><span class="params">(mean, stddev)</span></span>; <span class="comment">// 正态分布，mean 为均值，stddev 为标准差</span></span><br><span class="line"><span class="type">double</span> x = <span class="built_in">dist</span>(rng);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在 C++ 中，正确使用 mt19937 进行随机化</summary>
    
    
    
    <category term="algorithm" scheme="https://xglight.github.io/categories/algorithm/"/>
    
    
    <category term="c++" scheme="https://xglight.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>2025.10.10-A</title>
    <link href="https://xglight.github.io/posts/7663eb87/"/>
    <id>https://xglight.github.io/posts/7663eb87/</id>
    <published>2025-10-10T13:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.077Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5c692f22b4c38982a94584fd569357d8b700fa9b63730787088a56622edbd854"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">2025.10.10-A 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="math" scheme="https://xglight.github.io/tags/math/"/>
    
    <category term="school" scheme="https://xglight.github.io/tags/school/"/>
    
    <category term="dp" scheme="https://xglight.github.io/tags/dp/"/>
    
    <category term="trie" scheme="https://xglight.github.io/tags/trie/"/>
    
    <category term="manacher" scheme="https://xglight.github.io/tags/manacher/"/>
    
    <category term="hash" scheme="https://xglight.github.io/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>CF 2152</title>
    <link href="https://xglight.github.io/posts/e5225a54/"/>
    <id>https://xglight.github.io/posts/e5225a54/</id>
    <published>2025-10-09T14:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.079Z</updated>
    
    <content type="html"><![CDATA[<h2>A</h2><p>简单题，大胆猜结论，答案为不同的数字个数乘二减一。</p><p>但是赛时离散化忘记指定特值。</p><details class="toggle" ><summary class="toggle-button" style="">证明</summary><div class="toggle-content"><p>把目标数组去重后降序排列，令其为数组 <span class="math inline">\(a\)</span>，长度为 <span class="math inline">\(m\)</span>，对于 <span class="math inline">\(i = 1,2,\dots,m-1\)</span>，执行以下操作：</p><ol type="1"><li>增加 <span class="math inline">\(a_i - a_{i+1}\)</span>。</li><li>对于所有 <span class="math inline">\(a_j \neq a_i \text{且} j &gt; i\)</span>，清空。</li></ol><p>最后增加 <span class="math inline">\(a_m\)</span>。</p></div></details><h2>B</h2><p>简单题，博弈论。</p><p>最优情况一定是 Krug 被逼到了边缘，所以 Doran 也要走到边缘。</p><p>根据 Krug 和 Doran 的相对位置取 MAX 即可。</p><h2>C</h2><p>难度不大。</p><p>考虑一个数列如果不全是 <span class="math inline">\(0/1\)</span> 交替的，那么每次操作一定会有两个相邻的 <span class="math inline">\(0/1\)</span>。</p><p>如果全是 <span class="math inline">\(0/1\)</span> 交替的，只存在一次操作没有相邻的 <span class="math inline">\(0/1\)</span>，即答案会多 <span class="math inline">\(1\)</span>。</p><p>前缀和预处理即可。</p><h2>D</h2><p>赛时卡题了，观察结论题。</p><p>首先不看增加的操作，将一个数清到 <span class="math inline">\(1\)</span> 需要 <span class="math inline">\(\log_2 a_i\)</span> 次。</p><p>对一个偶数加 <span class="math inline">\(1\)</span> 没有用，立马除就可以。</p><p>如果一个数在不断除 <span class="math inline">\(2\)</span> 的时候，出现了不为 <span class="math inline">\(1\)</span> 的奇数，然后对这个数执行 <span class="math inline">\(+1\)</span>，那么怎么除都不行，所以贡献会多 <span class="math inline">\(1\)</span>。</p><p>所以除了 <span class="math inline">\(2\)</span> 的幂外，其它数贡献都会多 <span class="math inline">\(1\)</span>。</p><p>但是，还有一类特例，对于 <span class="math inline">\(2^k + 1~(k\in \mathbb{Z}^+)\)</span>，如果先除贡献就不会多，先加贡献就会多 <span class="math inline">\(1\)</span>，先手最多除一半的数，所以贡献会多一半。</p><h2>E</h2><p>赛时没做出来，构造题还是做少了。</p><p>看到构造想到询问特例，于是先询问所有点。</p><p>然后每次询问除了已经回答过的点。</p><p>如果某次回答长度大于等于 <span class="math inline">\(n+1\)</span>，直接输出。</p><p>否则，从每次询问向前面询问的点连边，跑 DAG 上 DP 即可。</p><h2>F</h2><p>思考题。</p><p>转换条件，满足 <span class="math inline">\(\max\{x,y,z\} - \min\{x,y,z\} &gt; z\)</span>，贪心的想，相当于满足 <span class="math inline">\(a_{i+2} - a_i &gt; z\)</span>。</p><p>所以我们可以选区间开头的两个点，<span class="math inline">\(l\)</span> 和 <span class="math inline">\(l+1\)</span>，两个点不断向后跳满足条件的点。</p><p>我们就看成后面的点向前面的点连边，树上倍增优化即可。</p><p>但是两个点可能会调到重复的点，即两点的 <span class="math inline">\(lca\)</span>，此时显然要从 <span class="math inline">\(lca\)</span> 和 <span class="math inline">\(lca+1\)</span> 重新开始跳。</p><p>于是再维护另一个倍增，表示跳到重复的点。</p><p>查询时先跳第二个倍增，如果区间还有剩余再跳第一个。</p>]]></content>
    
    
    <summary type="html">CF 2152 做题总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="dp" scheme="https://xglight.github.io/tags/dp/"/>
    
    <category term="codeforces" scheme="https://xglight.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>c++ 奇技淫巧</title>
    <link href="https://xglight.github.io/posts/78aab76b/"/>
    <id>https://xglight.github.io/posts/78aab76b/</id>
    <published>2025-10-09T04:00:00.000Z</published>
    <updated>2025-10-11T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>编译器版本： gcc 15.2.0</p></div><div class="note info flat"><p>C++ 标准： c++14</p></div><h2>前言</h2><p>本文介绍了 C++ 中一些有趣/神奇的函数，虽然不一定用的到就是了。</p><p>STL，lambda，随机化，chrono 均有另开文章。</p><h2>__builtin</h2><p>以 <code>__builtin</code> 开头的函数均为编译器内置函数，效率极高。</p><p><strong>位操作</strong></p><ul><li><code>__builtin_clz</code> 计算前导 <span class="math inline">\(0\)</span> 个数（<span class="math inline">\(32\)</span> 位），<span class="math inline">\(0\)</span> 是未定义行为。</li><li><code>__builtin_ctz</code> 计算尾随 <span class="math inline">\(0\)</span> 个数（<span class="math inline">\(32\)</span> 位），<span class="math inline">\(0\)</span> 是未定义行为。</li><li><code>__builtin_popcount</code> 计算 <span class="math inline">\(1\)</span> 的个数（<span class="math inline">\(32\)</span> 位）。</li><li><code>__builtin_parity</code> <span class="math inline">\(1\)</span> 的个数为奇数则返回 <span class="math inline">\(1\)</span>，偶数则返回 <span class="math inline">\(0\)</span>。</li></ul><p>上面函数结尾加 <code>ll</code> 即 <span class="math inline">\(64\)</span> 位版本，例如 <code>__builtin_clzll</code>。</p><p><strong>内存操作</strong></p><ul><li><code>__builtin_expect(expr, value)</code> 告诉编译器 <code>expr</code> 最可能为 <code>value</code>，用于分支预测。</li><li><code>__builtin_prefetch(addr, rw, locality)</code> 提前加载内存到缓存，<code>rw</code> 为 <span class="math inline">\(0\)</span> 表示读，为 <span class="math inline">\(1\)</span> 表示写；<code>locality</code> 为缓存层级。</li><li><code>__builtin_memcpy</code> 同 <code>memcpy</code> 函数。</li><li><code>__builtin_memset</code> 同 <code>memset</code> 函数。</li><li><code>__builtin_memmove</code> 同 <code>memmove</code> 函数。</li></ul><p><strong>数学</strong></p><ul><li><code>__builtin_abs</code> 绝对值。</li><li><code>__builtin_sqrt</code> 平方根。</li><li><code>__builtin_add_overflow</code>,<code>__builtin_mul_overflow</code> 等，检查溢出，返回 <code>bool</code>。</li></ul><h2>强制内联</h2><p><code>__attribute__((always_inline))</code> 不管优化级别，都尽量内联。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> __attribute__((always_inline)) <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>分支预测</h2><p>C++14 只有上文的 <code>__builtin_expect</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect(x &gt; <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">  <span class="comment">// x &gt; 0 更可能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++20 新增了 <code>[[likely]]</code> 和 <code>[[unlikely]]</code>，用于分支预测。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) [[likely]] &#123;</span><br><span class="line">    <span class="comment">// 这里分支更可能被执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> [[unlikely]] &#123;</span><br><span class="line">    <span class="comment">// 不常执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>constexpr</h2><p><code>constexpr</code> 在 C++11 引入，表示一个变量为常量表达式，<strong>必须</strong> 在编译期求值。</p><p>相较于 <code>const</code> 的仅保证只读，不保证编译期计算，它的速度会更快。</p><h2>algorithm</h2><p>这个库东西很多，这里只列举好用但大家不一定都知道的。</p><h3>排列</h3><ul><li><code>partial_sort(first,middle,last)</code> 只排序前几项，即保证 <span class="math inline">\([first,middle)\)</span> 是最小且有序的，复杂度 <span class="math inline">\(O(n\log k)\)</span>。</li><li><code>nth_element(first, nth, last)</code> 找到第 <span class="math inline">\(n\)</span> 小的元素，保证小于等于 <span class="math inline">\(nth\)</span> 的元素都在 <span class="math inline">\(nth\)</span> 的左边，大于等于 <span class="math inline">\(nth\)</span> 的元素都在 <span class="math inline">\(nth\)</span> 的右边，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>is_sorted(first,last)</code> 判断是否有序，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>next_permutation(first,last)</code> 产生下一个字典序排列，复杂度 <span class="math inline">\(O(n)\)</span>。（CSP-S 2025 初赛）</li><li><code>prev_permutation(first,last)</code> 产生上一个字典序排列，复杂度 <span class="math inline">\(O(n)\)</span>。（CSP-S 2025 初赛）</li></ul><h3>查找</h3><ul><li><code>find(first, last, value)</code> 返回指向第一个等于 <code>value</code> 的元素的迭代器，如果找不到，返回 <code>last</code>，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>find_if(first, last, pred)</code> 返回指向第一个满足 <code>pred</code> 的元素的迭代器，如果找不到，返回 <code>last</code>，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>count(first, last, value)</code> 返回 <code>value</code> 在区间 <span class="math inline">\([first, last)\)</span> 中出现的次数，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>count_if(first, last, pred)</code> 返回 <code>pred</code> 判定为真的元素在区间 <span class="math inline">\([first, last)\)</span> 中出现的次数，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>binary_search(first, last, value)</code> 判断 <code>value</code> 是否在区间 <span class="math inline">\([first, last)\)</span> 中，复杂度 <span class="math inline">\(O(log n)\)</span>（<mark class="hl-label red">必须有序</mark>）。</li><li><code>equal_range(first, last, value)</code> 返回一个 <code>pair</code> 表示一个区间 <span class="math inline">\([lower_bound, upper_bound)\)</span> 满足区间内的元素等于 <code>value</code>，复杂度 <span class="math inline">\(O(log n)\)</span>（<mark class="hl-label red">必须有序</mark>）。</li><li><code>minmax(a,b)</code> 返回一个 <code>pair</code> 表示 <code>a</code> 和 <code>b</code> 的最小值和最大值。</li><li><code>minmax_element(first, last)</code> 返回一个 <code>pair</code> 表示区间 <span class="math inline">\([first, last)\)</span> 中的最小值和最大值，复杂度 <span class="math inline">\(O(n)\)</span>。</li></ul><h3>修改</h3><ul><li><code>copy(first,last,out)</code> <strong>复制</strong> 元素到另一个容器，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>move(first,last,out)</code> <strong>移动</strong> 元素到另一个容器，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>fill(first,last,value)</code> 用指定值填充区间，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>rotate(first, middle, last)</code> 将区间 <span class="math inline">\([first,last)\)</span> 变为 <span class="math inline">\([middle, last) + [first, middle)\)</span>，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>replace(first, last, old_value, new_value)</code> 用 <code>new_value</code> 替换 <code>old_value</code>，复杂度 <span class="math inline">\(O(n)\)</span>。</li></ul><h3>随机化</h3><ul><li><code>shuffle(first, last, rng)</code> 将区间 <span class="math inline">\([first,last)\)</span> 随机化，复杂度 <span class="math inline">\(O(n)\)</span>（请不要再用 <code>random_shuffle</code>）。</li></ul><h2>numeric</h2><p>这个库提供了一些数值计算的函数。</p><ul><li><code>accumulate(first, last, init)</code> 累加区间 <span class="math inline">\([first,last)\)</span>，<code>init</code> 为初始值，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>inner_product(first1, last1, first2, init)</code> 计算两个区间 <span class="math inline">\([first1,last1)\)</span> 和 <span class="math inline">\([first2,last2)\)</span> 的内积，<code>init</code> 为初始值，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>partial_sum(first, last, out)</code> 计算区间 <span class="math inline">\([first,last)\)</span> 的前缀和，结果存入 <code>out</code>，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>adjacent_difference(first, last, out)</code> 计算区间 <span class="math inline">\([first,last)\)</span> 的相邻差，结果存入 <code>out</code>，复杂度 <span class="math inline">\(O(n)\)</span>。</li><li><code>iota(first, last, value)</code> 用 <code>value</code> 填充区间 <span class="math inline">\([first,last)\)</span>，复杂度 <span class="math inline">\(O(n)\)</span>。</li></ul><h2>initializer_list</h2><p>C++11 引入的一种新的数据结构，支持用大括号初始化列表，注意定义后不能修改。</p><p>常与 STL 容器一起使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::list&lt;<span class="type">int</span>&gt; l = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::set&lt;<span class="type">int</span>&gt; s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::<span class="built_in">max</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure><p>或者用于循环：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>iterator</h2><p>C++11 引入的一些迭代器相关的函数。</p><ul><li><code>distance(first, last)</code> 返回迭代器之间的距离，复杂度 <span class="math inline">\(O(1)\)</span>。</li><li><code>advance(it, n)</code> <strong>移动</strong> 迭代器 <code>it</code> 指向的位置 <code>n</code> 步，复杂度 <strong>依赖迭代器类型</strong>。</li><li><code>next(it, n)</code> <strong>返回</strong> 迭代器 <code>it</code> 指向的位置 <code>n</code> 步后的迭代器，复杂度 <strong>依赖迭代器类型</strong>。</li><li><code>prev(it, n)</code> <strong>返回</strong> 迭代器 <code>it</code> 指向的位置 <code>n</code> 步前的迭代器，复杂度 <strong>依赖迭代器类型</strong>。</li></ul><p>时间复杂度：</p><ul><li>对于 <code>vector</code>，<code>deque</code> 和 <code>array</code> 等，支持 <strong>直接跳跃</strong>，复杂度 <span class="math inline">\(O(1)\)</span>。</li><li>对于 <code>list</code>，<code>map</code> 和 <code>set</code> 等，时间复杂度 <span class="math inline">\(O(n)\)</span>。</li><li>对于单向迭代器，例如 <code>forward_list</code>，<code>istream_iterator</code> 等，时间复杂度 <span class="math inline">\(O(n)\)</span>，且只支持单向移动。</li></ul><h2>nullptr</h2><p>C++11 引入的 <code>nullptr</code> 关键字，用于表示空指针。</p><p>主要区别于 <code>NULL</code>，因为 <code>NULL</code> 被实现为 <code>#define NULL 0</code>。</p><h2>decltype</h2><p>C++11 引入的 <code>decltype</code> 关键字，用于获取表达式的类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// decltype(expression) var;</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> y = <span class="number">2.5</span>;</span><br><span class="line"><span class="keyword">decltype</span>(x) a = x; <span class="comment">// int</span></span><br><span class="line"><span class="keyword">decltype</span>(y) b = y; <span class="comment">// double</span></span><br><span class="line"><span class="keyword">decltype</span>(x+y) c = x+y; <span class="comment">// double, because (x+y) is a double expression</span></span><br></pre></td></tr></table></figure><h2>auto</h2><p>C++11 引入的 <code>auto</code> 关键字，用于自动推导类型。</p><h3>类型推导</h3><div class="note warning flat"><p>必须初始化，否则无法推导类型。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">10</span>; <span class="comment">// int</span></span><br><span class="line"><span class="keyword">auto</span> y = <span class="number">2.5</span>; <span class="comment">// double</span></span><br><span class="line"><span class="keyword">auto</span> z = <span class="string">&quot;hello&quot;</span>; <span class="comment">// const char*</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>注意默认去掉引用和 const。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> c = a;        <span class="comment">// int</span></span><br><span class="line"><span class="keyword">auto</span> d = &amp;a;       <span class="comment">// int*</span></span><br><span class="line"><span class="keyword">auto</span> e = &amp;b;       <span class="comment">// const int*</span></span><br><span class="line"><span class="keyword">auto</span>&amp; f = a;       <span class="comment">// int&amp;，引用类型必须显示加 &amp;  </span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b; <span class="comment">// 返回值类型自动推导</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>循环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : v) &#123; <span class="comment">// 如果要修改元素</span></span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>结构化绑定</h3><p>C++17 引入，但 C++14 可用，应该会报 warning。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> [x, y] = <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; mp = &#123;&#123;<span class="string">&quot;a&quot;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&quot;b&quot;</span>, <span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [key, value] : mp) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>if / switch 初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(key); it != mp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; it-&gt;second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>C++20</h3><p>模板参数中使用 auto：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">auto</span> N&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; N &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>&lt;<span class="number">42</span>&gt;();  <span class="comment">// N 被推导为 int</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">c++ 的一些好用/神奇的函数</summary>
    
    
    
    <category term="algorithm" scheme="https://xglight.github.io/categories/algorithm/"/>
    
    
    <category term="c++" scheme="https://xglight.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>2025.10.8-A</title>
    <link href="https://xglight.github.io/posts/4791dc7/"/>
    <id>https://xglight.github.io/posts/4791dc7/</id>
    <published>2025-10-08T13:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.077Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="6840ab164d716b2ab0474f519b7cc9406ed5cb88a1b12a39abb022c2939efa5b">93024cf999deb8d8b2919f7e109263d436f7768a67e3b41578a0afeefd292b2d6d5ddece01699d8f2cc04bccc4405b947a3fe5037bbcf5d47d5d5ad930b4c7b9ab9f5f3238dd5d9a4aceac8cd69ee0c215b9f27f78b0855917c24355aaec56e5b845932cf02de320468e98d727a4cb63092dae35430e3acf77d7bfed27e543578f37f6bb3d64e7c66f3506bbf2b6c265de9662030fe50805ab561444180ea5ad7a824c55e4a83dc107219baf57abb6d10e474ddec526ef5842d4c6bde6d9179d8da847f513069a9f4fab06d04a2c2d5d3c66877815116cebd1d82817f0b3eecefb87aa899039db9828a9b492976cec01527832224b8f3beeac886c98bf2c5a26668e1769419c16e29a29afebd3968609d233041f96f01a4d353ed720a82c42cb80cd3981a4ad6c06549f1253107a94d72b5b56f0db26fa4b15b5c0a1b7366f47e28eae47aac342f1e5cba30d6800d6a40801265497629d6a2019a6fd22e3f8067ad118ed9a63f289bd9dabf81f93303367c4c1e324e0312f649bad35104a55d0d2317474b848efd3059b96be7e5f36fd2243679aa06b02695bdae683aaa6d2e64db25936100324ec463ef96210dc6807f0218e33aa344830050d7ec54ca9ebe0cf46906a8e1bb6136169b9f9086d22b4cf4b20865bc673128b2910f8ddb03df213b7ddc7dc8e5e6460a682dfb01d37825664c8f49e26c6a22a301eb8658c354d98f216b571952b606ea6d400a7f66f2f543ade1f80e73f34c5baa64b2d9565632df9430d7ae897d90d395d94899000a0b6a6980c577b2011a9952bfbe95abe90f56732028116ac58f56c1e5fa2d6a37021d3518fbf55ce791c73b2b7c3f0f6b8dbb8aa08cc7a1a311bbaaeca547c4f01de1fe3e9add146f82f6f24cb1d6bf3b2b93915b08438e25187154dfeef118779ccf3522099a86ac92f921e60ee6c5d944f07c0aaeb8006abe1a7b1dd0fde5fe83100a6758169d4f504b92ed74a4d908af75e6de7b9d7892c9067c9e4438a1c6546ecf4dc4d58be96f42666b6bf95b0ede5e888f6ed7537988e08c0c4e562db58f4c383be1b6a01eb71b005b5c913e3ae2d595c712a020c2728194173da8c5e454e28f89f1c7425d72af8e884800938fa4c51b4e52aa954f2ddddc5e51bc36fb973b013f44d106ea184cac03f652396e0b9a6d8bd400671454921c712f98fce2a1f61ade72199412355208b0ad88bfa7756d47a4056d17d750724f8337aecf2de7196a8ea3dd2bd6241da4b1e7a1204e8107387728f55c80cb06fa199257680b1949751236d2904ad867f7f51dd6fd19aedb24efd9647570d249bc3a799faa5404b30de57ce7e38a73498e26cca573bd88a3270117fb6531fd16c7ff00b18e0886f13a22a0b5d61cc8fa81cae0628f73debbc04c43ee969b4a9ff455dba8e368b23dea987743b092e6a2b9688d3df05d1207e77eefb9bb8767caa06362dff6c27762ae4e670312c224db0ecf22ee94dde0c5bf85afafdd6231c5d42eacd75392c0838f3a245303a9d7020c127fe9b3ad42b4490f958e5310fe9c2592303b25f41073b48484f352c1b5dc66593af217fab5836d52ca640b5486778ddba515511a500d614303c3872847f7c30a5397e8d86f881b66261ced8dfe614dd814fe7bbaba062efc3d4c61c38e7d117cf986e67bc7974fb703539746c425e2304d1722fdf123f16f8e6c44a8627681f1c7cc7b593e35c48f4645c1be6768044aebe62d40b1ae1c79d6ee5c8573cc9ea2efc598b7bdb43d5011224a7827506983182900a561b28e4a0ad9631987d3dcbcb07595854052cdbd0bcc4f5eba0ae53ec9b31f309076efa8e2ef422c85b2bf667f5cb7fd57ca4bf83305605f277ba7b1d966902ad1bfcd12210a70f7c5eec05c778f58ba7c9deed9168ba338859c608e648e50800dad9508b23a0fc9b809a8715970ca638467e9198a7adca289c4fdba0e3f4608745a9cca4a7815620b467ac63cdbda1e056185cbc54524fca34ab999febe69d189fcc493b38c15377728d6f5ed647735776b6df358556058216d4af92c7092e1809ce8c2745d9a45e8b348ce10e7e7acb2f8178817d3a6e00f03c9bbf720754c22de123b3a8a268cb6d1065c9f2922c932e52e476a1ba68ac0473a64447d55eb78f486fde1c7c0f39594ac263df11994480ccbb8f56dbbf04a9376472f6f58f1cc8a8657e253a52fd5de10e0bba9aa9e7b69b1da3ffcc2d13ed9336a129fc8ebdfdeb11fa0b0f368d9b7d91cde570d3a08e181f52ea121441c0329cf23e2745d45025e345b4bb90e0ab6477fd381cf3c7aa185176352241acbe3ec34fe0776c19b9e585770a92e942f2ef5624fabccfcefb6bf6243c7d21e1f5a5f9586bc03c87320a7c886ff5cc737b2ff138042319b9a76a34783fe10e4487e38310142d9c35af7540f8691f084c08202bc5c3c44ac9fb805a7790f5ba2ea83fe685a1c9386211c025e2de7f7064a027456a519fa62e4dd6902106436e41329af134cfe1d47f169aaf6b3f26912fd8867863be0359a7b7bc4be0e85fe644f15bcf418ed934e241497dff0b28f04a0c648d22ab2ab005f5b888308fc1d1d7579698ec8afd10a5895c353ed45c198fa73f73df7f9de7ec7d158e64a989e0a75566cc71cf2d26713b7fb9c745f7d6d702a7100d8e4a9a4b2af210d26a59e5d4ccd4bb694ea74a182a53839d0887bccd8d1161b9129dbc87c11496aa2c712f51be7ca4d459ce128e28505c7e577dc4db1045b670bdffcfa14cfd5fed55e4189bd4713fd26ff0f7bf74aa7b18491bdb3fff12d2ebec6c8211ff3e755b8c7be07e843e55531c78cf4a6932c6fbe9656560ad02eac3035ef52d5401f542b9bafb8741da2492279945a46e76bf4bd8765bc55d975b6ec9fdc6d96b7e5048cbf47debccc0304b6a71d575f6eb12c7a5db18cdb6e8ff2137d40a65c6be1480832a0cdeafa208dc48e91482df1ec7a032e2532ac6b492c03f9d126d5c1021520379aa0698b463340a9da00032d8afe7cec825b5a37f2c4fcc3fd0f1cf313c00942b5a96c8a9373a6dc43e1ab1992853f4237a8776664aa14ea8fa62a52637889bff2a47eedf908c31e02007b71f71e10f96cd3cab8a537bd6e8c2969ab158dadbc2b565ab2270a07003828862aab5b06226e3ddbe4ba2d45becf7032c567a76c608c6df9d90499051c1a6793ae48efb30c2ff2b1932f4fb3fbb5f9346b196f6fa5cf74d166910b38ad38bc5a55638cddda4dd4e356cc0dfa39c4ef32bfb6c6cf8dbb6b3b222228ddb9c908183030b1e7b108fc8d5b866235be1944230a5527e13f4ff10bebaca5e0f427ec5e9edb3a05f3eefbe9518a95334325e409c5738c8a10ba3188985cb0b4cca81308b90c5f1aa31daf96980cf734ab831aafc166e71939c07f96849cc8cf370dea6c6f5c801147113c93c42ae3f26ba10e54611ab09272dc6c94daf5f16e237535b0c5229e977980e3bf33062d95736dda47e3649d341d146fe18f32dcadda393e90b989a44ff9973095fe1f1664a3632ab161c912ef7fe87d2f7087e4cad591a366c193280d69aea2f0586b579ce0c04d64e968bbf495e93b10ef782a71f8f30bcf7ec4e39bae6cd044db77559f131ad91bc5fdfabeacdcc2d977a6dc5c3be19571f7c5ea4dc1c3422041d0f12c897a0adcbed2f453da1200418b06621866ad1ca09f283b8dd6919f9adae758718a260f946cec5b1bb827b1814de8975aacff327a891841a248ba3248227291b3e0079bc67320843fb54f2e64079c1f444e771e3bbab5b253773aba8560af78837c2f6ca412ab83c00de2ed1d884d5a63d1cab6e4da920ef31cf4e5695f212ad2733a684183ea0cdb0316c262d93647d03a2063ab0929bec44e09d25062582e399ddce6a160c1892a49c88ba85be960fd5b8840806adf64e74bd03b4c619fdb6637ae17be25a35b49aa0328630a7b6f32e5f6fc2ab92651af85fd20a1bd4463d7cced4cfbbd39fe4d154c4cc870c0b2a5756cf4d0c70a61398e79b118ea7c28b2e10f90572c61a0c547d41ba6f8085f382799a2aaab23cd8782cc6bd63330b9777a10cf89702eeb5b1685498fb6ec530599aab8c4ae49f9fe152060572a4071bb1619e277d4bd871d39ff8449e4f1615f4d84ffe773cf1981c91da2eaa1820e71de2ae3d0713e9a02a04d4bed4d16e3a41441141c889d46ef3db61772e576b7777d9c85e2f596fcce181ee2f3bde7b1163a471f2dc4926c0e26c7f65079065c5ae95478be12557d42a5d4c4cdf81587590f06bb765867914a24a72d75a75eb37611660f0706e680a65d7940bbe8bd6187093b24f2b8a9ec7ff570bbf96a073d5c264c95736d8a41c2fb654c1a21e74edeab6b13ba87eae6ad8d894710569c178fc21a31807fe9eb9d8ee8427951ccdc2efc9baaec8b1830339c529f91c5f13bd1d41f8898132148fa598054b64e165b0d5481a682ca98e0e7c5fb3dbacb120615a1286ca164b8e1f9c59592ecf4ba74b2a9615d8181e8a3c0b30d1270783e2da6a1a7adb9fb7c17d53a58d6f99553fe692cd416cddc6409e391865f2449602e2bbef35db7957efa6523c3d7f82c1fbaaeb8b39b600d4519d3e6d0727fad8089c4128b0758258c0cbab41c9ee375e339e2179b9068f172dcc3bbb30e3ed295823c3bee8153e6082731e09dcfe7c368ee0e0c04a387f8628866f23508e164a78d6ccfb5ba65f2b3d5987d137cb106018d25ded64c340c3d5995ba385171f635cc060ae6386d34e26eb3cb3f2ae2d56dc72b35332d0b73aff05eb36da4ce0a2483c307a296093a53b290373d4f7649dce4b364714c533fb151ad538f0c5102640219cc6a16f0261b222ffd9f8aee8f5f109800a0592cc924fbf7a3996b23604fa1d16fb0dee</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">2025.10.8-A 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="school" scheme="https://xglight.github.io/tags/school/"/>
    
    <category term="dp" scheme="https://xglight.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>2025.10.7-NOIP</title>
    <link href="https://xglight.github.io/posts/25373191/"/>
    <id>https://xglight.github.io/posts/25373191/</id>
    <published>2025-10-07T13:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.077Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="f1b882435f86db8fbcbfda042724273de975bd115e2174a1774c7aed6b4874c6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">2025.10.5-NOIP 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="math" scheme="https://xglight.github.io/tags/math/"/>
    
    <category term="school" scheme="https://xglight.github.io/tags/school/"/>
    
    <category term="dp" scheme="https://xglight.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>提供给 Duel 的 Rating 计算方案</title>
    <link href="https://xglight.github.io/posts/486bb1c0/"/>
    <id>https://xglight.github.io/posts/486bb1c0/</id>
    <published>2025-10-06T04:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.078Z</updated>
    
    <content type="html"><![CDATA[<p>本方案基于加权 Elo 模型，并结合团队表现系数，客观反映选手实力。</p><h2>比赛模型转换</h2><p>难度权重设为：</p><p><span class="math display">\[W_t=\frac{D_t}{100}\quad(D_t\in\{100,200,\dots,1000\})\]</span></p><h2>队伍评级与期望胜率</h2><ol type="1"><li>队伍平均评级 记 R 为选手的评级。 <span class="math display">\[R_A = \frac{1}{n}\sum_{i=1}^n R_{A,i},\quadR_B = \frac{1}{m}\sum_{j=1}^m R_{B,j}\]</span><br />其中 <span class="math inline">\(n,m\)</span> 分别为 A、B 队参赛人数。</li><li>期望胜率 <span class="math display">\[E_A = \frac{1}{1 + 10^{(R_B - R_A)/400}},\quadE_B = 1 - E_A\]</span><br />若 A 队首解题目得 <span class="math inline">\(r_t=1\)</span>，B 队则得 <span class="math inline">\(r_t=0\)</span>；都未解或同时解则 <span class="math inline">\(r_t=0.5\)</span> 。</li></ol><h2>表现系数 <span class="math inline">\(f(P)\)</span></h2><ol type="1"><li>表现指标 <span class="math display">\[P_A = \frac{\text{A队实际得分}}{\text{理论最高分 }(100+200+\dots+1000)},\quadP_B = \frac{\text{B队实际得分}}{\text{理论最高分}}\]</span></li><li>映射函数 <span class="math display">\[f(P) = \alpha + (1-\alpha)\,P,\quad \alpha = 0.5\]</span><br /><span class="math inline">\(\alpha\)</span> 为保底系数，此处为 <span class="math inline">\(0.5\)</span>。</li></ol><h2>个人 Rating 更新公式</h2><p>对于第 <span class="math inline">\(t\)</span> 道题，第 <span class="math inline">\(i\)</span> 位选手的增量为 <span class="math display">\[\Delta R_{i,t} = f(P_{\text{其队}})\;\times\;K \times W_t \times (r_t - E_A)\]</span></p><ul><li><span class="math inline">\(K\)</span>：基础调整系数，此处为 <span class="math inline">\(K=32\)</span>。</li><li><span class="math inline">\(W_t\)</span>：题目难度权重</li><li><span class="math inline">\(r_t - E_A\)</span>：胜负偏差（胜为正、负为负）</li><li><span class="math inline">\(f(P)\)</span>：表现系数。</li></ul>]]></content>
    
    
    <summary type="html">本方案基于加权 Elo 模型，并结合团队表现系数，客观反映选手实力。</summary>
    
    
    
    <category term="other" scheme="https://xglight.github.io/categories/other/"/>
    
    
    <category term="other" scheme="https://xglight.github.io/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>2025.10.5-A</title>
    <link href="https://xglight.github.io/posts/ca18e94/"/>
    <id>https://xglight.github.io/posts/ca18e94/</id>
    <published>2025-10-05T13:00:00.000Z</published>
    <updated>2025-10-29T14:35:50.077Z</updated>
    
    <content type="html"><![CDATA[<h2>T1 misspelling</h2><p><a href="https://www.luogu.com.cn/problem/P9522">[JOISC 2022] 错误拼写</a></p><p>先刻画题目，<span class="math inline">\(T_u \le T_v,u&lt;v\)</span> 相当于 <span class="math inline">\(S_{[u,v]}\)</span> 全部相等或 <span class="math inline">\(\forall k\in [i,p),S_i = S_k \text{且} S_i &gt; S_p\)</span>。</p><p><span class="math inline">\(u&gt;v\)</span> 同理。</p><p>这样我们就从后向前转移 DP <span class="math inline">\(f_{i,j}\)</span>，表示已经处理完 <span class="math inline">\([i+1,n]\)</span>，其中 <span class="math inline">\(s_i = j\)</span> 的方案数。</p><p>假设枚举一个 <span class="math inline">\(i&#39; &gt; i\)</span> 进行转移，表示 <span class="math inline">\([i,i&#39;-1]\)</span> 全部相等，<span class="math inline">\(s_i&#39; \neq s_i\)</span>，如果存在 <span class="math inline">\(i \le u &lt; i&#39; \le v\)</span>：</p><ul><li>当 <span class="math inline">\(T_u \le T_v\)</span> 时，<span class="math inline">\(\forall i&#39; \in (u,v]\)</span>，一定要有 <span class="math inline">\(j &gt; j&#39;\)</span></li><li>当 <span class="math inline">\(T_u &gt; T_v\)</span> 时，类似</li></ul><p>也就是说，假设固定 <span class="math inline">\(i&#39;\)</span>，在 <span class="math inline">\(i\)</span> 不断前移中，必然有一个位置让 <span class="math inline">\(i&#39;\)</span> 不能产生 <span class="math inline">\(j &gt; j&#39;\)</span> 的贡献，也必然有一个位置让 <span class="math inline">\(i&#39;\)</span> 不能产生 <span class="math inline">\(j &lt; j&#39;\)</span> 的贡献。</p><p>设 <span class="math inline">\(g_j\)</span> 表示 <span class="math inline">\(f_{i+1} \sim f_n\)</span> 的 <span class="math inline">\(j\)</span> 的贡献。</p><p>现在枚举到 <span class="math inline">\(i\)</span>，只考虑和 <span class="math inline">\(i\)</span> 有关的贡献（<span class="math inline">\(i=u&lt;v\)</span>）：</p><ul><li>若有 <span class="math inline">\(T_u \le T_v\)</span>，<span class="math inline">\(\forall i&#39; \in (u,v]\)</span>，且仍产生 <span class="math inline">\(j &lt; j&#39;\)</span>，删去该贡献，即 <span class="math inline">\(h_j\)</span> 减去 <span class="math inline">\(\sum_{j &lt; j&#39;} f_{i&#39;,j&#39;}\)</span>。</li><li>若有 <span class="math inline">\(T_v \le T_u\)</span>，同理。</li></ul><p>更新完后更新 <span class="math inline">\(f_{i,j} = h_j + 1\)</span>，<span class="math inline">\(1\)</span> 表示全部相同的情况。</p><p>再更新 <span class="math inline">\(f_i\)</span> 对 <span class="math inline">\(h\)</span> 的贡献，即 <span class="math inline">\(h_j\)</span> 加上 <span class="math inline">\(\sum_{j \neq j&#39;} f_{i,j&#39;}\)</span>。</p><p>可以用链表维护仍然存在的贡献。</p><h2>T2 ski 2</h2><p><a href="https://www.luogu.com.cn/problem/P10432">[JOIST 2024] 滑雪 2 / Ski 2</a></p><p>性质观察题，DP 解决。</p><p><strong>结论一：</strong> 贪心的思考，一定是选高度最低的点建造酒店，如果1高度相同，就选建造设施最便宜的点，</p><p><strong>结论二：</strong> 如果要提升发高度，最多只会提升至另一个点高度 <span class="math inline">\(+1\)</span>。</p><p><strong>结论三：</strong> 如果一个点建造了连接设施，那它就一定不会升高。</p><details class="toggle" ><summary class="toggle-button" style="">证明</summary><div class="toggle-content"><p>若现在有 <span class="math inline">\(H_x &lt; H_y\)</span>，现在将 <span class="math inline">\(x\)</span> 提升到 <span class="math inline">\(H_y+1\)</span>，并且向 <span class="math inline">\(y\)</span> 连边。</p><p>若 <span class="math inline">\(C_y \le C_x\)</span>，则 <span class="math inline">\(x\)</span> 连向 <span class="math inline">\(y\)</span> 一定优，还可以将本来连向 <span class="math inline">\(x\)</span> 的点改连向 <span class="math inline">\(y\)</span>。</p><p>若 <span class="math inline">\(C_y &gt; C_x\)</span>，就可以放弃提升，将 <span class="math inline">\(y\)</span> 连向 <span class="math inline">\(x\)</span>，将本来连向 <span class="math inline">\(x\)</span> 的点改连向 <span class="math inline">\(y\)</span>，也一定更优。</p></div></details><p>所以，考虑 <span class="math inline">\(f_{i,j,k}\)</span>，表示当前在高度 <span class="math inline">\(i\)</span>，该高度上一共有 <span class="math inline">\(j\)</span> 个可用的接口，有 <span class="math inline">\(k\)</span> 个节点现在高度为 <span class="math inline">\(i\)</span>，且准备抬升到 <span class="math inline">\(i+1\)</span>。</p><ol type="1"><li>可以新建一个链接设施，<span class="math inline">\(f_{i,j+1,k} = f_{i,j,k} + minc_i\)</span>，其中 <span class="math inline">\(minc_i\)</span> 指在高度 <span class="math inline">\(i\)</span> 新建接口的最小花费。</li><li>可以向 <span class="math inline">\(i+1\)</span> 转移，设高度 <span class="math inline">\(i\)</span> 原本有 <span class="math inline">\(cnt_i\)</span> 个节点，<span class="math inline">\(f_{i+1,j,max\{0,k+cnt_{i+1} - j\}} = f_{i,j,k} + K\cdot k \cdot (H_{i+1} - H_{i})\)</span>。因为 <strong>结论三</strong>，所以新的 <span class="math inline">\(k\)</span> 有 <span class="math inline">\(j\)</span> 个节点一定不会再升高。</li></ol><p>我们发现这样时间复杂度是 <span class="math inline">\(O(n^2\max H)\)</span>。</p><p>考虑将 <span class="math inline">\(H\)</span> 离散化，注意不止要加入 <span class="math inline">\(H_i\)</span>，还有所有可能经过升高到达的高度。</p><p>时间复杂度 <span class="math inline">\(O(n^3)\)</span>。</p>]]></content>
    
    
    <summary type="html">2025.10.5-A 比赛总结</summary>
    
    
    
    <category term="solutions" scheme="https://xglight.github.io/categories/solutions/"/>
    
    
    <category term="dp" scheme="https://xglight.github.io/tags/dp/"/>
    
  </entry>
  
</feed>
